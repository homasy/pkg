// supply_chain_service.proto

syntax = "proto3";

package supply_chain;

import "google/api/annotations.proto";

option go_package = "./services/supply-chain-service/proto";

// Common message for items in the supply chain
message StockItem {
  string id = 1;
  string name = 2;
  string description = 3;
  string sku = 4;
  string barcode = 5;
  string unit_of_measure = 6;
  double current_quantity = 7;
  double reorder_level = 8;
  double minimum_level = 9;
  double maximum_level = 10;
  double unit_cost = 11;
  double unit_price = 12;
  double tax_rate = 13;
  bool is_active = 14;
  bool expiry_tracking = 15;
  bool batch_tracking = 16;
  string created_at = 17;
  string updated_at = 18;
}

// Message for a store location
message Store {
  string id = 1;
  string name = 2;
  string location = 3;
  string type = 4; // e.g., "pharmacy", "catering", "bulk_store"
  bool is_active = 5;
  string created_at = 6;
  string updated_at = 7;
}

// Message for a supplier
message Supplier {
  string id = 1;
  string name = 2;
  string contact_person = 3;
  string phone = 4;
  string email = 5;
  string address = 6;
  bool is_active = 7;
  string created_at = 8;
  string updated_at = 9;
}

// Message for requisition items
message RequisitionItem {
  string item_id = 1;
  string item_name = 2;
  double quantity_requested = 3;
  double quantity_approved = 4;
  string unit_of_measure = 5;
  double estimated_unit_price = 6;
  string notes = 7;
}

// Message for requisition
message Requisition {
  string id = 1;
  string requisition_number = 2;
  string requestor_id = 3;
  string requestor_name = 4;
  string requestor_signature = 5;
  string requesting_store_id = 6;
  string requesting_store_name = 7;
  string supplier_id = 8;
  string supplier_name = 9;
  string status = 10; // e.g., "draft", "pending", "approved", "rejected"
  string approver_id = 11;
  string approver_name = 12;
  string approver_signature = 13;
  string approval_date = 14;
  string notes = 15;
  string created_at = 16;
  string updated_at = 17;
  repeated RequisitionItem items = 18;
}

// Message for LPO items
message LPOItem {
  string item_id = 1;
  string item_name = 2;
  double quantity_requested = 3;
  string unit_of_measure = 4;
}

// Message for LPO (Local Purchase Order)
message LocalPurchaseOrder {
  string id = 1;
  string lpo_number = 2;
  string requisition_id = 3;
  string requisition_number = 4;
  string supplier_id = 5;
  string supplier_name = 6;
  string store_id = 7;
  string store_name = 8;
  string status = 9; // e.g., "draft", "approved", "issued", "delivered"
  string authorizer_id = 10;
  string authorizer_name = 11;
  string authorizer_signature = 12;
  string authorization_date = 13;
  string created_at = 14;
  string updated_at = 15;
  repeated LPOItem items = 16;
}

// Message for Goods Received Note (GRN)
message GoodsReceivedNote {
  string id = 1;
  string grn_number = 2;
  string lpo_id = 3;
  string lpo_number = 4;
  string supplier_id = 5;
  string supplier_name = 6;
  string store_id = 7;
  string store_name = 8;
  string delivery_note_number = 9;
  string invoice_number = 10;
  string status = 11; // e.g., "pending", "quality_check", "completed", "partial"
  string receiver_id = 12;
  string receiver_name = 13;
  string receiver_signature = 14;
  string checker_id = 15;
  string checker_name = 16;
  string check_date = 17;
  string notes = 18;
  string created_at = 19;
  string updated_at = 20;
  repeated GoodsReceivedItem items = 21;
}

// Message for items in GRN
message GoodsReceivedItem {
  string item_id = 1;
  string item_name = 2;
  double ordered_quantity = 3;
  double received_quantity = 4; 
  double accepted_quantity = 5;
  double rejected_quantity = 6;
  string rejection_reason = 7;
  string unit_of_measure = 8;
  string batch_number = 9;
  string expiry_date = 10;
  string bin_number = 11;
  string notes = 12;
}

// Message for stock adjustment
message StockAdjustment {
  string id = 1;
  string adjustment_number = 2;
  string store_id = 3;
  string store_name = 4;
  string reason = 5; // e.g., "expired", "damaged", "theft", "correction"
  string notes = 6;
  string status = 7; // e.g., "pending", "approved", "completed"
  string authorizer_id = 8;
  string authorizer_name = 9;
  string authorizer_signature = 10;
  string created_at = 11;
  string updated_at = 12;
  repeated StockAdjustmentItem items = 13;
}

// Message for stock adjustment items
message StockAdjustmentItem {
  string item_id = 1;
  string item_name = 2;
  double current_quantity = 3;
  double adjusted_quantity = 4;
  string unit_of_measure = 5;
  string notes = 6;
}

// Message for inter-store transfer
message InterStoreTransfer {
  string id = 1;
  string transfer_number = 2;
  string source_store_id = 3;
  string source_store_name = 4;
  string destination_store_id = 5;
  string destination_store_name = 6;
  string status = 7; // e.g., "pending", "approved", "in_transit", "received"
  string requestor_id = 8;
  string requestor_name = 9;
  string requestor_signature = 10;
  string approver_id = 11;
  string approver_name = 12;
  string approver_signature = 13;
  string receiver_id = 14;
  string receiver_name = 15;
  string receiver_signature = 16;
  string reason = 17;
  string notes = 18;
  string created_at = 19;
  string updated_at = 20;
  repeated InterStoreTransferItem items = 21;
}

// Message for inter-store transfer items
message InterStoreTransferItem {
  string item_id = 1;
  string item_name = 2;
  double current_quantity = 3;
  double transfer_quantity = 4;
  double received_quantity = 5;
  string unit_of_measure = 6;
  string notes = 7;
}

// Message for credit note
message CreditNote {
  string id = 1;
  string credit_note_number = 2;
  string grn_id = 3;
  string grn_number = 4;
  string supplier_id = 5;
  string supplier_name = 6;
  string store_id = 7;
  string store_name = 8;
  string issuer_id = 9;
  string issuer_name = 10;
  string issuer_signature = 11;
  string approver_id = 12;
  string approver_name = 13;
  string approver_signature = 14;
  string reason = 15;
  string notes = 16;
  string status = 17;
  string created_at = 18;
  string updated_at = 19;
  repeated CreditNoteItem items = 20;
}

// Message for credit note items
message CreditNoteItem {
  string item_id = 1;
  string item_name = 2;
  double received_quantity = 3;
  double accepted_quantity = 4;
  double return_quantity = 5;
  string unit_of_measure = 6;
  string batch_number = 7;
  string expiry_date = 8;
  string reason = 9;
  string notes = 10;
}

service SupplyChainService {
  // Stock Item Management
  rpc CreateStockItem (CreateStockItemRequest) returns (CreateStockItemResponse) {
    option (google.api.http) = {
      post: "/v1/stock-items"
      body: "*"
    };
  }
  
  rpc GetStockItem (GetStockItemRequest) returns (GetStockItemResponse) {
    option (google.api.http) = {
      get: "/v1/stock-items/{id}"
    };
  }
  
  rpc UpdateStockItem (UpdateStockItemRequest) returns (UpdateStockItemResponse) {
    option (google.api.http) = {
      put: "/v1/stock-items/{id}"
      body: "*"
    };
  }
  
  rpc ListStockItems (ListStockItemsRequest) returns (ListStockItemsResponse) {
    option (google.api.http) = {
      get: "/v1/stock-items"
    };
  }
  
  rpc GetStockLevels (GetStockLevelsRequest) returns (GetStockLevelsResponse) {
    option (google.api.http) = {
      get: "/v1/stock-levels"
    };
  }
  
  rpc GetExpiringItems (GetExpiringItemsRequest) returns (GetExpiringItemsResponse) {
    option (google.api.http) = {
      get: "/v1/expiring-items"
    };
  }
  
  rpc GetItemsBelowReorderLevel (GetItemsBelowReorderLevelRequest) returns (GetItemsBelowReorderLevelResponse) {
    option (google.api.http) = {
      get: "/v1/low-stock-items"
    };
  }
  
  // Store Management
  rpc CreateStore (CreateStoreRequest) returns (CreateStoreResponse) {
    option (google.api.http) = {
      post: "/v1/stores"
      body: "*"
    };
  }
  
  rpc ListStores (ListStoresRequest) returns (ListStoresResponse) {
    option (google.api.http) = {
      get: "/v1/stores"
    };
  }
  
  // Supplier Management
  rpc CreateSupplier (CreateSupplierRequest) returns (CreateSupplierResponse) {
    option (google.api.http) = {
      post: "/v1/suppliers"
      body: "*"
    };
  }
  
  rpc ListSuppliers (ListSuppliersRequest) returns (ListSuppliersResponse) {
    option (google.api.http) = {
      get: "/v1/suppliers"
    };
  }
  
  // Requisition Management
  rpc CreateRequisition (CreateRequisitionRequest) returns (CreateRequisitionResponse) {
    option (google.api.http) = {
      post: "/v1/requisitions"
      body: "*"
    };
  }
  
  rpc ApproveRequisition (ApproveRequisitionRequest) returns (ApproveRequisitionResponse) {
    option (google.api.http) = {
      post: "/v1/requisitions/{id}/approve"
      body: "*"
    };
  }
  
  rpc GetRequisition (GetRequisitionRequest) returns (GetRequisitionResponse) {
    option (google.api.http) = {
      get: "/v1/requisitions/{id}"
    };
  }
  
  rpc ListRequisitions (ListRequisitionsRequest) returns (ListRequisitionsResponse) {
    option (google.api.http) = {
      get: "/v1/requisitions"
    };
  }
  
  // LPO Management
  rpc CreateLPO (CreateLPORequest) returns (CreateLPOResponse) {
    option (google.api.http) = {
      post: "/v1/lpos"
      body: "*"
    };
  }
  
  rpc ApproveLPO (ApproveLPORequest) returns (ApproveLPOResponse) {
    option (google.api.http) = {
      post: "/v1/lpos/{id}/approve"
      body: "*"
    };
  }
  
  rpc GetLPO (GetLPORequest) returns (GetLPOResponse) {
    option (google.api.http) = {
      get: "/v1/lpos/{id}"
    };
  }
  
  rpc ListLPOs (ListLPOsRequest) returns (ListLPOsResponse) {
    option (google.api.http) = {
      get: "/v1/lpos"
    };
  }
  
  // GRN Management
  rpc CreateGRN (CreateGRNRequest) returns (CreateGRNResponse) {
    option (google.api.http) = {
      post: "/v1/grns"
      body: "*"
    };
  }
  
  rpc PerformQualityCheck (PerformQualityCheckRequest) returns (PerformQualityCheckResponse) {
    option (google.api.http) = {
      post: "/v1/grns/{id}/quality-check"
      body: "*"
    };
  }
  
  rpc GetGRN (GetGRNRequest) returns (GetGRNResponse) {
    option (google.api.http) = {
      get: "/v1/grns/{id}"
    };
  }
  
  rpc ListGRNs (ListGRNsRequest) returns (ListGRNsResponse) {
    option (google.api.http) = {
      get: "/v1/grns"
    };
  }
  
  // Stock Adjustment
  rpc CreateStockAdjustment (CreateStockAdjustmentRequest) returns (CreateStockAdjustmentResponse) {
    option (google.api.http) = {
      post: "/v1/stock-adjustments"
      body: "*"
    };
  }

  rpc ListStockAdjustments (ListStockAdjustmentsRequest) returns (ListStockAdjustmentsResponse) {
    option (google.api.http) = {
      get: "/v1/stock-adjustments"
    };
  }
  
  rpc ApproveStockAdjustment (ApproveStockAdjustmentRequest) returns (ApproveStockAdjustmentResponse) {
    option (google.api.http) = {
      post: "/v1/stock-adjustments/{id}/approve"
      body: "*"
    };
  }
  
  rpc GetStockAdjustment (GetStockAdjustmentRequest) returns (GetStockAdjustmentResponse) {
    option (google.api.http) = {
      get: "/v1/stock-adjustments/{id}"
    };
  }
  
  // Inter-Store Transfer
  rpc CreateInterStoreTransfer (CreateInterStoreTransferRequest) returns (CreateInterStoreTransferResponse) {
    option (google.api.http) = {
      post: "/v1/inter-store-transfers"
      body: "*"
    };
  }
  
  rpc ApproveInterStoreTransfer (ApproveInterStoreTransferRequest) returns (ApproveInterStoreTransferResponse) {
    option (google.api.http) = {
      post: "/v1/inter-store-transfers/{id}/approve"
      body: "*"
    };
  }
  
  rpc ReceiveInterStoreTransfer (ReceiveInterStoreTransferRequest) returns (ReceiveInterStoreTransferResponse) {
    option (google.api.http) = {
      post: "/v1/inter-store-transfers/{id}/receive"
      body: "*"
    };
  }
  
  rpc GetInterStoreTransfer (GetInterStoreTransferRequest) returns (GetInterStoreTransferResponse) {
    option (google.api.http) = {
      get: "/v1/inter-store-transfers/{id}"
    };
  }
  
  rpc ListInterStoreTransfers (ListInterStoreTransfersRequest) returns (ListInterStoreTransfersResponse) {
    option (google.api.http) = {
      get: "/v1/inter-store-transfers"
    };
  }
  
  // Credit Notes
  rpc CreateCreditNote (CreateCreditNoteRequest) returns (CreateCreditNoteResponse) {
    option (google.api.http) = {
      post: "/v1/credit-notes"
      body: "*"
    };
  }
  
  rpc ApproveCreditNote (ApproveCreditNoteRequest) returns (ApproveCreditNoteResponse) {
    option (google.api.http) = {
      post: "/v1/credit-notes/{id}/approve"
      body: "*"
    };
  }
  
  rpc GetCreditNote (GetCreditNoteRequest) returns (GetCreditNoteResponse) {
    option (google.api.http) = {
      get: "/v1/credit-notes/{id}"
    };
  }
  
  rpc ListCreditNotes (ListCreditNotesRequest) returns (ListCreditNotesResponse) {
    option (google.api.http) = {
      get: "/v1/credit-notes"
    };
  }
}

// Request and Response messages for Stock Items
message CreateStockItemRequest {
  StockItem item = 1;
}

message CreateStockItemResponse {
  string id = 1;
}

message GetStockItemRequest {
  string id = 1;
}

message GetStockItemResponse {
  StockItem item = 1;
}

message UpdateStockItemRequest {
  string id = 1;
  StockItem item = 2;
}

message UpdateStockItemResponse {
  bool success = 1;
}

message ListStockItemsRequest {
  string filter = 1;
}

message ListStockItemsResponse {
  repeated StockItem items = 1;
}

message GetStockLevelsRequest {
  string store_id = 1;
}

message GetStockLevelsResponse {
  repeated StockItem items = 1;
}

message GetExpiringItemsRequest {
  string store_id = 1;
  string days_ahead = 2; // e.g., "30" for items expiring in next 30 days
}

message GetExpiringItemsResponse {
  repeated GoodsReceivedItem items = 1;
}

message GetItemsBelowReorderLevelRequest {
  string store_id = 1;
}

message GetItemsBelowReorderLevelResponse {
  repeated StockItem items = 1;
}

// Request and Response messages for Stores
message CreateStoreRequest {
  Store store = 1;
}

message CreateStoreResponse {
  string id = 1;
}

message ListStoresRequest {}

message ListStoresResponse {
  repeated Store stores = 1;
}

// Request and Response messages for Suppliers
message CreateSupplierRequest {
  Supplier supplier = 1;
}

message CreateSupplierResponse {
  string id = 1;
}

message ListSuppliersRequest {}

message ListSuppliersResponse {
  repeated Supplier suppliers = 1;
}

// Request and Response messages for Requisitions
message CreateRequisitionRequest {
  Requisition requisition = 1;
}

message CreateRequisitionResponse {
  string id = 1;
}

message ApproveRequisitionRequest {
  string id = 1;
  string approver_id = 2;
  string approver_name = 3;
  string approver_signature = 4;
  repeated RequisitionItem approved_items = 5;
}

message ApproveRequisitionResponse {
  bool success = 1;
}

message GetRequisitionRequest {
  string id = 1;
}

message GetRequisitionResponse {
  Requisition requisition = 1;
}

message ListRequisitionsRequest {
  string status = 1; // optional filter by status
  string store_id = 2; // optional filter by store
}

message ListRequisitionsResponse {
  repeated Requisition requisitions = 1;
}

// Request and Response messages for LPOs
message CreateLPORequest {
  LocalPurchaseOrder lpo = 1;
}

message CreateLPOResponse {
  string id = 1;
}

message ApproveLPORequest {
  string id = 1;
  string authorizer_id = 2;
  string authorizer_name = 3;
  string authorizer_signature = 4;
}

message ApproveLPOResponse {
  bool success = 1;
}

message GetLPORequest {
  string id = 1;
}

message GetLPOResponse {
  LocalPurchaseOrder lpo = 1;
}

message ListLPOsRequest {
  string status = 1; // optional filter by status
  string store_id = 2; // optional filter by store
  string supplier_id = 3; // optional filter by supplier
}

message ListLPOsResponse {
  repeated LocalPurchaseOrder lpos = 1;
}

// Request and Response messages for GRNs
message CreateGRNRequest {
  GoodsReceivedNote grn = 1;
}

message CreateGRNResponse {
  string id = 1;
}

message PerformQualityCheckRequest {
  string id = 1;
  string checker_id = 2;
  string checker_name = 3;
  repeated GoodsReceivedItem items = 4;
}

message PerformQualityCheckResponse {
  bool success = 1;
}

message GetGRNRequest {
  string id = 1;
}

message GetGRNResponse {
  GoodsReceivedNote grn = 1;
}

message ListGRNsRequest {
  string status = 1; // optional filter by status
  string store_id = 2; // optional filter by store
  string supplier_id = 3; // optional filter by supplier
  string lpo_number = 4; // optional filter by LPO number
}

message ListGRNsResponse {
  repeated GoodsReceivedNote grns = 1;
}

// Request and Response messages for Stock Adjustments
message CreateStockAdjustmentRequest {
  StockAdjustment adjustment = 1;
}

message CreateStockAdjustmentResponse {
  string id = 1;
}

message ApproveStockAdjustmentRequest {
  string id = 1;
  string authorizer_id = 2;
  string authorizer_name = 3;
  string authorizer_signature = 4;
}

message ApproveStockAdjustmentResponse {
  bool success = 1;
}

message GetStockAdjustmentRequest {
  string id = 1;
}

message GetStockAdjustmentResponse {
  StockAdjustment adjustment = 1;
}

message ListStockAdjustmentsRequest {
  string status = 1; // optional filter by status
  string store_id = 2; // optional filter by store
  string reason = 3; // optional filter by reason (e.g., "expired", "damaged")
  string start_date = 4; // optional filter by start date
  string end_date = 5; // optional filter by end date
}

message ListStockAdjustmentsResponse {
  repeated StockAdjustment adjustments = 1;
}

// Request and Response messages for Inter-Store Transfers
message CreateInterStoreTransferRequest {
  InterStoreTransfer transfer = 1;
}

message CreateInterStoreTransferResponse {
  string id = 1;
}

message ApproveInterStoreTransferRequest {
  string id = 1;
  string approver_id = 2;
  string approver_name = 3;
  string approver_signature = 4;
}

message ApproveInterStoreTransferResponse {
  bool success = 1;
}

message ReceiveInterStoreTransferRequest {
  string id = 1;
  string receiver_id = 2;
  string receiver_name = 3;
  string receiver_signature = 4;
  repeated InterStoreTransferItem received_items = 5;
}

message ReceiveInterStoreTransferResponse {
  bool success = 1;
}

message GetInterStoreTransferRequest {
  string id = 1;
}

message GetInterStoreTransferResponse {
  InterStoreTransfer transfer = 1;
}

message ListInterStoreTransfersRequest {
  string status = 1;
  string source_store_id = 2;
  string destination_store_id = 3;
}

message ListInterStoreTransfersResponse {
  repeated InterStoreTransfer transfers = 1;
}

// Request and Response messages for Credit Notes
message CreateCreditNoteRequest {
  CreditNote credit_note = 1;
}

message CreateCreditNoteResponse {
  string id = 1;
}

message ApproveCreditNoteRequest {
  string id = 1;
  string approver_id = 2;
  string approver_name = 3;
  string approver_signature = 4;
}

message ApproveCreditNoteResponse {
  bool success = 1;
}

message GetCreditNoteRequest {
  string id = 1;
}

message GetCreditNoteResponse {
  CreditNote credit_note = 1;
}

message ListCreditNotesRequest {
  string status = 1;
  string supplier_id = 2;
}

message ListCreditNotesResponse {
  repeated CreditNote credit_notes = 1;
}