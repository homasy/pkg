// services/route-permissions-service/proto/permission_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: permissions.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutePermissionService_CheckPermission_FullMethodName        = "/route_permissions.RoutePermissionService/CheckPermission"
	RoutePermissionService_GetAllRoutePermissions_FullMethodName = "/route_permissions.RoutePermissionService/GetAllRoutePermissions"
	RoutePermissionService_UpdateRoutePermission_FullMethodName  = "/route_permissions.RoutePermissionService/UpdateRoutePermission"
	RoutePermissionService_AddRoutePermission_FullMethodName     = "/route_permissions.RoutePermissionService/AddRoutePermission"
)

// RoutePermissionServiceClient is the client API for RoutePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutePermissionServiceClient interface {
	// Check if a user has permission to access a route
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	// Get all route permissions
	GetAllRoutePermissions(ctx context.Context, in *GetAllRoutePermissionsRequest, opts ...grpc.CallOption) (*GetAllRoutePermissionsResponse, error)
	// Update route permissions
	UpdateRoutePermission(ctx context.Context, in *UpdateRoutePermissionRequest, opts ...grpc.CallOption) (*UpdateRoutePermissionResponse, error)
	// Add new route permission
	AddRoutePermission(ctx context.Context, in *AddRoutePermissionRequest, opts ...grpc.CallOption) (*AddRoutePermissionResponse, error)
}

type routePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutePermissionServiceClient(cc grpc.ClientConnInterface) RoutePermissionServiceClient {
	return &routePermissionServiceClient{cc}
}

func (c *routePermissionServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, RoutePermissionService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routePermissionServiceClient) GetAllRoutePermissions(ctx context.Context, in *GetAllRoutePermissionsRequest, opts ...grpc.CallOption) (*GetAllRoutePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllRoutePermissionsResponse)
	err := c.cc.Invoke(ctx, RoutePermissionService_GetAllRoutePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routePermissionServiceClient) UpdateRoutePermission(ctx context.Context, in *UpdateRoutePermissionRequest, opts ...grpc.CallOption) (*UpdateRoutePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoutePermissionResponse)
	err := c.cc.Invoke(ctx, RoutePermissionService_UpdateRoutePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routePermissionServiceClient) AddRoutePermission(ctx context.Context, in *AddRoutePermissionRequest, opts ...grpc.CallOption) (*AddRoutePermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRoutePermissionResponse)
	err := c.cc.Invoke(ctx, RoutePermissionService_AddRoutePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutePermissionServiceServer is the server API for RoutePermissionService service.
// All implementations must embed UnimplementedRoutePermissionServiceServer
// for forward compatibility.
type RoutePermissionServiceServer interface {
	// Check if a user has permission to access a route
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	// Get all route permissions
	GetAllRoutePermissions(context.Context, *GetAllRoutePermissionsRequest) (*GetAllRoutePermissionsResponse, error)
	// Update route permissions
	UpdateRoutePermission(context.Context, *UpdateRoutePermissionRequest) (*UpdateRoutePermissionResponse, error)
	// Add new route permission
	AddRoutePermission(context.Context, *AddRoutePermissionRequest) (*AddRoutePermissionResponse, error)
	mustEmbedUnimplementedRoutePermissionServiceServer()
}

// UnimplementedRoutePermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutePermissionServiceServer struct{}

func (UnimplementedRoutePermissionServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedRoutePermissionServiceServer) GetAllRoutePermissions(context.Context, *GetAllRoutePermissionsRequest) (*GetAllRoutePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoutePermissions not implemented")
}
func (UnimplementedRoutePermissionServiceServer) UpdateRoutePermission(context.Context, *UpdateRoutePermissionRequest) (*UpdateRoutePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutePermission not implemented")
}
func (UnimplementedRoutePermissionServiceServer) AddRoutePermission(context.Context, *AddRoutePermissionRequest) (*AddRoutePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoutePermission not implemented")
}
func (UnimplementedRoutePermissionServiceServer) mustEmbedUnimplementedRoutePermissionServiceServer() {
}
func (UnimplementedRoutePermissionServiceServer) testEmbeddedByValue() {}

// UnsafeRoutePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutePermissionServiceServer will
// result in compilation errors.
type UnsafeRoutePermissionServiceServer interface {
	mustEmbedUnimplementedRoutePermissionServiceServer()
}

func RegisterRoutePermissionServiceServer(s grpc.ServiceRegistrar, srv RoutePermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutePermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutePermissionService_ServiceDesc, srv)
}

func _RoutePermissionService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutePermissionServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutePermissionService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutePermissionServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutePermissionService_GetAllRoutePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRoutePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutePermissionServiceServer).GetAllRoutePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutePermissionService_GetAllRoutePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutePermissionServiceServer).GetAllRoutePermissions(ctx, req.(*GetAllRoutePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutePermissionService_UpdateRoutePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutePermissionServiceServer).UpdateRoutePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutePermissionService_UpdateRoutePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutePermissionServiceServer).UpdateRoutePermission(ctx, req.(*UpdateRoutePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutePermissionService_AddRoutePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoutePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutePermissionServiceServer).AddRoutePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutePermissionService_AddRoutePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutePermissionServiceServer).AddRoutePermission(ctx, req.(*AddRoutePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutePermissionService_ServiceDesc is the grpc.ServiceDesc for RoutePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route_permissions.RoutePermissionService",
	HandlerType: (*RoutePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckPermission",
			Handler:    _RoutePermissionService_CheckPermission_Handler,
		},
		{
			MethodName: "GetAllRoutePermissions",
			Handler:    _RoutePermissionService_GetAllRoutePermissions_Handler,
		},
		{
			MethodName: "UpdateRoutePermission",
			Handler:    _RoutePermissionService_UpdateRoutePermission_Handler,
		},
		{
			MethodName: "AddRoutePermission",
			Handler:    _RoutePermissionService_AddRoutePermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "permissions.proto",
}
