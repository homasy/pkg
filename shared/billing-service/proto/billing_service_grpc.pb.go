// billing.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: billing_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BillingService_CreateInvoice_FullMethodName              = "/billing_service.BillingService/CreateInvoice"
	BillingService_GetInvoice_FullMethodName                 = "/billing_service.BillingService/GetInvoice"
	BillingService_UpdateInvoice_FullMethodName              = "/billing_service.BillingService/UpdateInvoice"
	BillingService_DeleteInvoice_FullMethodName              = "/billing_service.BillingService/DeleteInvoice"
	BillingService_ListInvoices_FullMethodName               = "/billing_service.BillingService/ListInvoices"
	BillingService_GetInvoicesByPatientId_FullMethodName     = "/billing_service.BillingService/GetInvoicesByPatientId"
	BillingService_ProcessPayment_FullMethodName             = "/billing_service.BillingService/ProcessPayment"
	BillingService_MarkInvoiceAsPaid_FullMethodName          = "/billing_service.BillingService/MarkInvoiceAsPaid"
	BillingService_SendInvoiceEmail_FullMethodName           = "/billing_service.BillingService/SendInvoiceEmail"
	BillingService_CreateServiceRecord_FullMethodName        = "/billing_service.BillingService/CreateServiceRecord"
	BillingService_UpdateServiceRecordStatus_FullMethodName  = "/billing_service.BillingService/UpdateServiceRecordStatus"
	BillingService_GetServiceRecordsByPatient_FullMethodName = "/billing_service.BillingService/GetServiceRecordsByPatient"
	BillingService_GenerateInvoiceFromRecords_FullMethodName = "/billing_service.BillingService/GenerateInvoiceFromRecords"
	BillingService_ListServiceRecords_FullMethodName         = "/billing_service.BillingService/ListServiceRecords"
)

// BillingServiceClient is the client API for BillingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BillingService defines the service for managing invoices and payments
type BillingServiceClient interface {
	// Creates an invoice
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	// Retrieves an invoice by ID
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error)
	// Updates an invoice
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error)
	// Deletes an invoice
	DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error)
	// Lists all invoices (with optional filters)
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// Get invoices by patient ID
	GetInvoicesByPatientId(ctx context.Context, in *GetInvoicesByPatientIdRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	// Process payment for an invoice
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	// Mark invoice as paid
	MarkInvoiceAsPaid(ctx context.Context, in *MarkInvoiceAsPaidRequest, opts ...grpc.CallOption) (*MarkInvoiceAsPaidResponse, error)
	// Send invoice by email
	SendInvoiceEmail(ctx context.Context, in *SendInvoiceEmailRequest, opts ...grpc.CallOption) (*SendInvoiceEmailResponse, error)
	// Service Record Management
	CreateServiceRecord(ctx context.Context, in *CreateServiceRecordRequest, opts ...grpc.CallOption) (*CreateServiceRecordResponse, error)
	UpdateServiceRecordStatus(ctx context.Context, in *UpdateServiceRecordStatusRequest, opts ...grpc.CallOption) (*UpdateServiceRecordStatusResponse, error)
	GetServiceRecordsByPatient(ctx context.Context, in *GetServiceRecordsByPatientRequest, opts ...grpc.CallOption) (*GetServiceRecordsByPatientResponse, error)
	GenerateInvoiceFromRecords(ctx context.Context, in *GenerateInvoiceFromRecordsRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error)
	ListServiceRecords(ctx context.Context, in *ListServiceRecordsRequest, opts ...grpc.CallOption) (*ListServiceRecordsResponse, error)
}

type billingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingServiceClient(cc grpc.ClientConnInterface) BillingServiceClient {
	return &billingServiceClient{cc}
}

func (c *billingServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*GetInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*UpdateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_DeleteInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, BillingService_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetInvoicesByPatientId(ctx context.Context, in *GetInvoicesByPatientIdRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, BillingService_GetInvoicesByPatientId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, BillingService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) MarkInvoiceAsPaid(ctx context.Context, in *MarkInvoiceAsPaidRequest, opts ...grpc.CallOption) (*MarkInvoiceAsPaidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkInvoiceAsPaidResponse)
	err := c.cc.Invoke(ctx, BillingService_MarkInvoiceAsPaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) SendInvoiceEmail(ctx context.Context, in *SendInvoiceEmailRequest, opts ...grpc.CallOption) (*SendInvoiceEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInvoiceEmailResponse)
	err := c.cc.Invoke(ctx, BillingService_SendInvoiceEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) CreateServiceRecord(ctx context.Context, in *CreateServiceRecordRequest, opts ...grpc.CallOption) (*CreateServiceRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceRecordResponse)
	err := c.cc.Invoke(ctx, BillingService_CreateServiceRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) UpdateServiceRecordStatus(ctx context.Context, in *UpdateServiceRecordStatusRequest, opts ...grpc.CallOption) (*UpdateServiceRecordStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateServiceRecordStatusResponse)
	err := c.cc.Invoke(ctx, BillingService_UpdateServiceRecordStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GetServiceRecordsByPatient(ctx context.Context, in *GetServiceRecordsByPatientRequest, opts ...grpc.CallOption) (*GetServiceRecordsByPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceRecordsByPatientResponse)
	err := c.cc.Invoke(ctx, BillingService_GetServiceRecordsByPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) GenerateInvoiceFromRecords(ctx context.Context, in *GenerateInvoiceFromRecordsRequest, opts ...grpc.CallOption) (*CreateInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvoiceResponse)
	err := c.cc.Invoke(ctx, BillingService_GenerateInvoiceFromRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingServiceClient) ListServiceRecords(ctx context.Context, in *ListServiceRecordsRequest, opts ...grpc.CallOption) (*ListServiceRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServiceRecordsResponse)
	err := c.cc.Invoke(ctx, BillingService_ListServiceRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServiceServer is the server API for BillingService service.
// All implementations must embed UnimplementedBillingServiceServer
// for forward compatibility.
//
// BillingService defines the service for managing invoices and payments
type BillingServiceServer interface {
	// Creates an invoice
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error)
	// Retrieves an invoice by ID
	GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error)
	// Updates an invoice
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error)
	// Deletes an invoice
	DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error)
	// Lists all invoices (with optional filters)
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	// Get invoices by patient ID
	GetInvoicesByPatientId(context.Context, *GetInvoicesByPatientIdRequest) (*ListInvoicesResponse, error)
	// Process payment for an invoice
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	// Mark invoice as paid
	MarkInvoiceAsPaid(context.Context, *MarkInvoiceAsPaidRequest) (*MarkInvoiceAsPaidResponse, error)
	// Send invoice by email
	SendInvoiceEmail(context.Context, *SendInvoiceEmailRequest) (*SendInvoiceEmailResponse, error)
	// Service Record Management
	CreateServiceRecord(context.Context, *CreateServiceRecordRequest) (*CreateServiceRecordResponse, error)
	UpdateServiceRecordStatus(context.Context, *UpdateServiceRecordStatusRequest) (*UpdateServiceRecordStatusResponse, error)
	GetServiceRecordsByPatient(context.Context, *GetServiceRecordsByPatientRequest) (*GetServiceRecordsByPatientResponse, error)
	GenerateInvoiceFromRecords(context.Context, *GenerateInvoiceFromRecordsRequest) (*CreateInvoiceResponse, error)
	ListServiceRecords(context.Context, *ListServiceRecordsRequest) (*ListServiceRecordsResponse, error)
	mustEmbedUnimplementedBillingServiceServer()
}

// UnimplementedBillingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBillingServiceServer struct{}

func (UnimplementedBillingServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*GetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedBillingServiceServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*UpdateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedBillingServiceServer) DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedBillingServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedBillingServiceServer) GetInvoicesByPatientId(context.Context, *GetInvoicesByPatientIdRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoicesByPatientId not implemented")
}
func (UnimplementedBillingServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedBillingServiceServer) MarkInvoiceAsPaid(context.Context, *MarkInvoiceAsPaidRequest) (*MarkInvoiceAsPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInvoiceAsPaid not implemented")
}
func (UnimplementedBillingServiceServer) SendInvoiceEmail(context.Context, *SendInvoiceEmailRequest) (*SendInvoiceEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInvoiceEmail not implemented")
}
func (UnimplementedBillingServiceServer) CreateServiceRecord(context.Context, *CreateServiceRecordRequest) (*CreateServiceRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceRecord not implemented")
}
func (UnimplementedBillingServiceServer) UpdateServiceRecordStatus(context.Context, *UpdateServiceRecordStatusRequest) (*UpdateServiceRecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceRecordStatus not implemented")
}
func (UnimplementedBillingServiceServer) GetServiceRecordsByPatient(context.Context, *GetServiceRecordsByPatientRequest) (*GetServiceRecordsByPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceRecordsByPatient not implemented")
}
func (UnimplementedBillingServiceServer) GenerateInvoiceFromRecords(context.Context, *GenerateInvoiceFromRecordsRequest) (*CreateInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoiceFromRecords not implemented")
}
func (UnimplementedBillingServiceServer) ListServiceRecords(context.Context, *ListServiceRecordsRequest) (*ListServiceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceRecords not implemented")
}
func (UnimplementedBillingServiceServer) mustEmbedUnimplementedBillingServiceServer() {}
func (UnimplementedBillingServiceServer) testEmbeddedByValue()                        {}

// UnsafeBillingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingServiceServer will
// result in compilation errors.
type UnsafeBillingServiceServer interface {
	mustEmbedUnimplementedBillingServiceServer()
}

func RegisterBillingServiceServer(s grpc.ServiceRegistrar, srv BillingServiceServer) {
	// If the following call pancis, it indicates UnimplementedBillingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BillingService_ServiceDesc, srv)
}

func _BillingService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_DeleteInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).DeleteInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetInvoicesByPatientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoicesByPatientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetInvoicesByPatientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetInvoicesByPatientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetInvoicesByPatientId(ctx, req.(*GetInvoicesByPatientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_MarkInvoiceAsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInvoiceAsPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).MarkInvoiceAsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_MarkInvoiceAsPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).MarkInvoiceAsPaid(ctx, req.(*MarkInvoiceAsPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_SendInvoiceEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInvoiceEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).SendInvoiceEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_SendInvoiceEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).SendInvoiceEmail(ctx, req.(*SendInvoiceEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_CreateServiceRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).CreateServiceRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_CreateServiceRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).CreateServiceRecord(ctx, req.(*CreateServiceRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_UpdateServiceRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRecordStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).UpdateServiceRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_UpdateServiceRecordStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).UpdateServiceRecordStatus(ctx, req.(*UpdateServiceRecordStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GetServiceRecordsByPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRecordsByPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GetServiceRecordsByPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GetServiceRecordsByPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GetServiceRecordsByPatient(ctx, req.(*GetServiceRecordsByPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_GenerateInvoiceFromRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoiceFromRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).GenerateInvoiceFromRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_GenerateInvoiceFromRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).GenerateInvoiceFromRecords(ctx, req.(*GenerateInvoiceFromRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingService_ListServiceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServiceServer).ListServiceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BillingService_ListServiceRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServiceServer).ListServiceRecords(ctx, req.(*ListServiceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingService_ServiceDesc is the grpc.ServiceDesc for BillingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing_service.BillingService",
	HandlerType: (*BillingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _BillingService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _BillingService_GetInvoice_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _BillingService_UpdateInvoice_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _BillingService_DeleteInvoice_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _BillingService_ListInvoices_Handler,
		},
		{
			MethodName: "GetInvoicesByPatientId",
			Handler:    _BillingService_GetInvoicesByPatientId_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _BillingService_ProcessPayment_Handler,
		},
		{
			MethodName: "MarkInvoiceAsPaid",
			Handler:    _BillingService_MarkInvoiceAsPaid_Handler,
		},
		{
			MethodName: "SendInvoiceEmail",
			Handler:    _BillingService_SendInvoiceEmail_Handler,
		},
		{
			MethodName: "CreateServiceRecord",
			Handler:    _BillingService_CreateServiceRecord_Handler,
		},
		{
			MethodName: "UpdateServiceRecordStatus",
			Handler:    _BillingService_UpdateServiceRecordStatus_Handler,
		},
		{
			MethodName: "GetServiceRecordsByPatient",
			Handler:    _BillingService_GetServiceRecordsByPatient_Handler,
		},
		{
			MethodName: "GenerateInvoiceFromRecords",
			Handler:    _BillingService_GenerateInvoiceFromRecords_Handler,
		},
		{
			MethodName: "ListServiceRecords",
			Handler:    _BillingService_ListServiceRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing_service.proto",
}
