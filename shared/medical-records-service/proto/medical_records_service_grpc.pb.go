// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: medical_records_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalRecordService_AddDiagnosis_FullMethodName       = "/medical_record_service.MedicalRecordService/AddDiagnosis"
	MedicalRecordService_GetDiagnosis_FullMethodName       = "/medical_record_service.MedicalRecordService/GetDiagnosis"
	MedicalRecordService_UpdateDiagnosis_FullMethodName    = "/medical_record_service.MedicalRecordService/UpdateDiagnosis"
	MedicalRecordService_DeleteDiagnosis_FullMethodName    = "/medical_record_service.MedicalRecordService/DeleteDiagnosis"
	MedicalRecordService_ListDiagnoses_FullMethodName      = "/medical_record_service.MedicalRecordService/ListDiagnoses"
	MedicalRecordService_AddNote_FullMethodName            = "/medical_record_service.MedicalRecordService/AddNote"
	MedicalRecordService_GetNote_FullMethodName            = "/medical_record_service.MedicalRecordService/GetNote"
	MedicalRecordService_UpdateNote_FullMethodName         = "/medical_record_service.MedicalRecordService/UpdateNote"
	MedicalRecordService_DeleteNote_FullMethodName         = "/medical_record_service.MedicalRecordService/DeleteNote"
	MedicalRecordService_ListNotes_FullMethodName          = "/medical_record_service.MedicalRecordService/ListNotes"
	MedicalRecordService_AddVitalSign_FullMethodName       = "/medical_record_service.MedicalRecordService/AddVitalSign"
	MedicalRecordService_GetVitalSign_FullMethodName       = "/medical_record_service.MedicalRecordService/GetVitalSign"
	MedicalRecordService_ListVitalSigns_FullMethodName     = "/medical_record_service.MedicalRecordService/ListVitalSigns"
	MedicalRecordService_AddDocument_FullMethodName        = "/medical_record_service.MedicalRecordService/AddDocument"
	MedicalRecordService_GetDocument_FullMethodName        = "/medical_record_service.MedicalRecordService/GetDocument"
	MedicalRecordService_UpdateDocument_FullMethodName     = "/medical_record_service.MedicalRecordService/UpdateDocument"
	MedicalRecordService_DeleteDocument_FullMethodName     = "/medical_record_service.MedicalRecordService/DeleteDocument"
	MedicalRecordService_ListDocuments_FullMethodName      = "/medical_record_service.MedicalRecordService/ListDocuments"
	MedicalRecordService_AddDocumentVersion_FullMethodName = "/medical_record_service.MedicalRecordService/AddDocumentVersion"
	MedicalRecordService_ShareDocument_FullMethodName      = "/medical_record_service.MedicalRecordService/ShareDocument"
)

// MedicalRecordServiceClient is the client API for MedicalRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalRecordServiceClient interface {
	// Diagnosis endpoints
	AddDiagnosis(ctx context.Context, in *AddDiagnosisRequest, opts ...grpc.CallOption) (*Diagnosis, error)
	GetDiagnosis(ctx context.Context, in *GetDiagnosisRequest, opts ...grpc.CallOption) (*Diagnosis, error)
	UpdateDiagnosis(ctx context.Context, in *Diagnosis, opts ...grpc.CallOption) (*Diagnosis, error)
	DeleteDiagnosis(ctx context.Context, in *DeleteDiagnosisRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDiagnoses(ctx context.Context, in *ListDiagnosesRequest, opts ...grpc.CallOption) (*ListDiagnosesResponse, error)
	// Notes endpoints
	AddNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*Note, error)
	GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error)
	UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error)
	DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error)
	// Vital Signs endpoints
	AddVitalSign(ctx context.Context, in *AddVitalSignRequest, opts ...grpc.CallOption) (*VitalSign, error)
	GetVitalSign(ctx context.Context, in *GetVitalSignRequest, opts ...grpc.CallOption) (*VitalSign, error)
	ListVitalSigns(ctx context.Context, in *ListVitalSignsRequest, opts ...grpc.CallOption) (*ListVitalSignsResponse, error)
	// Document endpoints
	AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error)
	UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error)
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	AddDocumentVersion(ctx context.Context, in *AddDocumentVersionRequest, opts ...grpc.CallOption) (*DocumentVersion, error)
	ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type medicalRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordServiceClient(cc grpc.ClientConnInterface) MedicalRecordServiceClient {
	return &medicalRecordServiceClient{cc}
}

func (c *medicalRecordServiceClient) AddDiagnosis(ctx context.Context, in *AddDiagnosisRequest, opts ...grpc.CallOption) (*Diagnosis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Diagnosis)
	err := c.cc.Invoke(ctx, MedicalRecordService_AddDiagnosis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetDiagnosis(ctx context.Context, in *GetDiagnosisRequest, opts ...grpc.CallOption) (*Diagnosis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Diagnosis)
	err := c.cc.Invoke(ctx, MedicalRecordService_GetDiagnosis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateDiagnosis(ctx context.Context, in *Diagnosis, opts ...grpc.CallOption) (*Diagnosis, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Diagnosis)
	err := c.cc.Invoke(ctx, MedicalRecordService_UpdateDiagnosis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) DeleteDiagnosis(ctx context.Context, in *DeleteDiagnosisRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_DeleteDiagnosis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ListDiagnoses(ctx context.Context, in *ListDiagnosesRequest, opts ...grpc.CallOption) (*ListDiagnosesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDiagnosesResponse)
	err := c.cc.Invoke(ctx, MedicalRecordService_ListDiagnoses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) AddNote(ctx context.Context, in *AddNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, MedicalRecordService_AddNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetNote(ctx context.Context, in *GetNoteRequest, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, MedicalRecordService_GetNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*Note, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Note)
	err := c.cc.Invoke(ctx, MedicalRecordService_UpdateNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) DeleteNote(ctx context.Context, in *DeleteNoteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_DeleteNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (*ListNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNotesResponse)
	err := c.cc.Invoke(ctx, MedicalRecordService_ListNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) AddVitalSign(ctx context.Context, in *AddVitalSignRequest, opts ...grpc.CallOption) (*VitalSign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VitalSign)
	err := c.cc.Invoke(ctx, MedicalRecordService_AddVitalSign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetVitalSign(ctx context.Context, in *GetVitalSignRequest, opts ...grpc.CallOption) (*VitalSign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VitalSign)
	err := c.cc.Invoke(ctx, MedicalRecordService_GetVitalSign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ListVitalSigns(ctx context.Context, in *ListVitalSignsRequest, opts ...grpc.CallOption) (*ListVitalSignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVitalSignsResponse)
	err := c.cc.Invoke(ctx, MedicalRecordService_ListVitalSigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) AddDocument(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, MedicalRecordService_AddDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, MedicalRecordService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) UpdateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*Document, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Document)
	err := c.cc.Invoke(ctx, MedicalRecordService_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, MedicalRecordService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) AddDocumentVersion(ctx context.Context, in *AddDocumentVersionRequest, opts ...grpc.CallOption) (*DocumentVersion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentVersion)
	err := c.cc.Invoke(ctx, MedicalRecordService_AddDocumentVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordServiceClient) ShareDocument(ctx context.Context, in *ShareDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MedicalRecordService_ShareDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordServiceServer is the server API for MedicalRecordService service.
// All implementations must embed UnimplementedMedicalRecordServiceServer
// for forward compatibility.
type MedicalRecordServiceServer interface {
	// Diagnosis endpoints
	AddDiagnosis(context.Context, *AddDiagnosisRequest) (*Diagnosis, error)
	GetDiagnosis(context.Context, *GetDiagnosisRequest) (*Diagnosis, error)
	UpdateDiagnosis(context.Context, *Diagnosis) (*Diagnosis, error)
	DeleteDiagnosis(context.Context, *DeleteDiagnosisRequest) (*emptypb.Empty, error)
	ListDiagnoses(context.Context, *ListDiagnosesRequest) (*ListDiagnosesResponse, error)
	// Notes endpoints
	AddNote(context.Context, *AddNoteRequest) (*Note, error)
	GetNote(context.Context, *GetNoteRequest) (*Note, error)
	UpdateNote(context.Context, *Note) (*Note, error)
	DeleteNote(context.Context, *DeleteNoteRequest) (*emptypb.Empty, error)
	ListNotes(context.Context, *ListNotesRequest) (*ListNotesResponse, error)
	// Vital Signs endpoints
	AddVitalSign(context.Context, *AddVitalSignRequest) (*VitalSign, error)
	GetVitalSign(context.Context, *GetVitalSignRequest) (*VitalSign, error)
	ListVitalSigns(context.Context, *ListVitalSignsRequest) (*ListVitalSignsResponse, error)
	// Document endpoints
	AddDocument(context.Context, *AddDocumentRequest) (*Document, error)
	GetDocument(context.Context, *GetDocumentRequest) (*Document, error)
	UpdateDocument(context.Context, *Document) (*Document, error)
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error)
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	AddDocumentVersion(context.Context, *AddDocumentVersionRequest) (*DocumentVersion, error)
	ShareDocument(context.Context, *ShareDocumentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

// UnimplementedMedicalRecordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalRecordServiceServer struct{}

func (UnimplementedMedicalRecordServiceServer) AddDiagnosis(context.Context, *AddDiagnosisRequest) (*Diagnosis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDiagnosis not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetDiagnosis(context.Context, *GetDiagnosisRequest) (*Diagnosis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosis not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateDiagnosis(context.Context, *Diagnosis) (*Diagnosis, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiagnosis not implemented")
}
func (UnimplementedMedicalRecordServiceServer) DeleteDiagnosis(context.Context, *DeleteDiagnosisRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiagnosis not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ListDiagnoses(context.Context, *ListDiagnosesRequest) (*ListDiagnosesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiagnoses not implemented")
}
func (UnimplementedMedicalRecordServiceServer) AddNote(context.Context, *AddNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNote not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetNote(context.Context, *GetNoteRequest) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNote not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateNote(context.Context, *Note) (*Note, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNote not implemented")
}
func (UnimplementedMedicalRecordServiceServer) DeleteNote(context.Context, *DeleteNoteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNote not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ListNotes(context.Context, *ListNotesRequest) (*ListNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (UnimplementedMedicalRecordServiceServer) AddVitalSign(context.Context, *AddVitalSignRequest) (*VitalSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVitalSign not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetVitalSign(context.Context, *GetVitalSignRequest) (*VitalSign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVitalSign not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ListVitalSigns(context.Context, *ListVitalSignsRequest) (*ListVitalSignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVitalSigns not implemented")
}
func (UnimplementedMedicalRecordServiceServer) AddDocument(context.Context, *AddDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocument not implemented")
}
func (UnimplementedMedicalRecordServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedMedicalRecordServiceServer) UpdateDocument(context.Context, *Document) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedMedicalRecordServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedMedicalRecordServiceServer) AddDocumentVersion(context.Context, *AddDocumentVersionRequest) (*DocumentVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocumentVersion not implemented")
}
func (UnimplementedMedicalRecordServiceServer) ShareDocument(context.Context, *ShareDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareDocument not implemented")
}
func (UnimplementedMedicalRecordServiceServer) mustEmbedUnimplementedMedicalRecordServiceServer() {}
func (UnimplementedMedicalRecordServiceServer) testEmbeddedByValue()                              {}

// UnsafeMedicalRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordServiceServer interface {
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

func RegisterMedicalRecordServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalRecordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalRecordService_ServiceDesc, srv)
}

func _MedicalRecordService_AddDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).AddDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_AddDiagnosis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).AddDiagnosis(ctx, req.(*AddDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_GetDiagnosis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetDiagnosis(ctx, req.(*GetDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Diagnosis)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_UpdateDiagnosis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateDiagnosis(ctx, req.(*Diagnosis))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_DeleteDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).DeleteDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_DeleteDiagnosis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).DeleteDiagnosis(ctx, req.(*DeleteDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ListDiagnoses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiagnosesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ListDiagnoses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ListDiagnoses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ListDiagnoses(ctx, req.(*ListDiagnosesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_AddNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).AddNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_AddNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).AddNote(ctx, req.(*AddNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_GetNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetNote(ctx, req.(*GetNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_UpdateNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_DeleteNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).DeleteNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_DeleteNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).DeleteNote(ctx, req.(*DeleteNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ListNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ListNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ListNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ListNotes(ctx, req.(*ListNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_AddVitalSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVitalSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).AddVitalSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_AddVitalSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).AddVitalSign(ctx, req.(*AddVitalSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetVitalSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVitalSignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetVitalSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_GetVitalSign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetVitalSign(ctx, req.(*GetVitalSignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ListVitalSigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVitalSignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ListVitalSigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ListVitalSigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ListVitalSigns(ctx, req.(*ListVitalSignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_AddDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).AddDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_AddDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).AddDocument(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).UpdateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_AddDocumentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).AddDocumentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_AddDocumentVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).AddDocumentVersion(ctx, req.(*AddDocumentVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordService_ShareDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).ShareDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordService_ShareDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).ShareDocument(ctx, req.(*ShareDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical_record_service.MedicalRecordService",
	HandlerType: (*MedicalRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDiagnosis",
			Handler:    _MedicalRecordService_AddDiagnosis_Handler,
		},
		{
			MethodName: "GetDiagnosis",
			Handler:    _MedicalRecordService_GetDiagnosis_Handler,
		},
		{
			MethodName: "UpdateDiagnosis",
			Handler:    _MedicalRecordService_UpdateDiagnosis_Handler,
		},
		{
			MethodName: "DeleteDiagnosis",
			Handler:    _MedicalRecordService_DeleteDiagnosis_Handler,
		},
		{
			MethodName: "ListDiagnoses",
			Handler:    _MedicalRecordService_ListDiagnoses_Handler,
		},
		{
			MethodName: "AddNote",
			Handler:    _MedicalRecordService_AddNote_Handler,
		},
		{
			MethodName: "GetNote",
			Handler:    _MedicalRecordService_GetNote_Handler,
		},
		{
			MethodName: "UpdateNote",
			Handler:    _MedicalRecordService_UpdateNote_Handler,
		},
		{
			MethodName: "DeleteNote",
			Handler:    _MedicalRecordService_DeleteNote_Handler,
		},
		{
			MethodName: "ListNotes",
			Handler:    _MedicalRecordService_ListNotes_Handler,
		},
		{
			MethodName: "AddVitalSign",
			Handler:    _MedicalRecordService_AddVitalSign_Handler,
		},
		{
			MethodName: "GetVitalSign",
			Handler:    _MedicalRecordService_GetVitalSign_Handler,
		},
		{
			MethodName: "ListVitalSigns",
			Handler:    _MedicalRecordService_ListVitalSigns_Handler,
		},
		{
			MethodName: "AddDocument",
			Handler:    _MedicalRecordService_AddDocument_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _MedicalRecordService_GetDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _MedicalRecordService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _MedicalRecordService_DeleteDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _MedicalRecordService_ListDocuments_Handler,
		},
		{
			MethodName: "AddDocumentVersion",
			Handler:    _MedicalRecordService_AddDocumentVersion_Handler,
		},
		{
			MethodName: "ShareDocument",
			Handler:    _MedicalRecordService_ShareDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical_records_service.proto",
}
