// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: issue_report_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IssueReportService_AddReport_FullMethodName              = "/issue_report_service.IssueReportService/AddReport"
	IssueReportService_GetUserReports_FullMethodName         = "/issue_report_service.IssueReportService/GetUserReports"
	IssueReportService_GetAllReports_FullMethodName          = "/issue_report_service.IssueReportService/GetAllReports"
	IssueReportService_DeleteReport_FullMethodName           = "/issue_report_service.IssueReportService/DeleteReport"
	IssueReportService_UpdateReportStatus_FullMethodName     = "/issue_report_service.IssueReportService/UpdateReportStatus"
	IssueReportService_AddPasswordRequest_FullMethodName     = "/issue_report_service.IssueReportService/AddPasswordRequest"
	IssueReportService_GetAllPasswordRequests_FullMethodName = "/issue_report_service.IssueReportService/GetAllPasswordRequests"
	IssueReportService_UpdateRequestStatus_FullMethodName    = "/issue_report_service.IssueReportService/UpdateRequestStatus"
)

// IssueReportServiceClient is the client API for IssueReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The user report service definition
type IssueReportServiceClient interface {
	AddReport(ctx context.Context, in *AddReportRequest, opts ...grpc.CallOption) (*AddReportResponse, error)
	GetUserReports(ctx context.Context, in *GetUserReportsRequest, opts ...grpc.CallOption) (*GetUserReportsResponse, error)
	GetAllReports(ctx context.Context, in *GetAllReportsRequest, opts ...grpc.CallOption) (*GetAllReportsResponse, error)
	DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error)
	UpdateReportStatus(ctx context.Context, in *UpdateReportStatusRequest, opts ...grpc.CallOption) (*UpdateReportStatusResponse, error)
	AddPasswordRequest(ctx context.Context, in *AddPasswordMessageRequest, opts ...grpc.CallOption) (*AddPasswordResponse, error)
	GetAllPasswordRequests(ctx context.Context, in *GetAllPasswordRequestsRequest, opts ...grpc.CallOption) (*GetAllPasswordRequestsResponse, error)
	UpdateRequestStatus(ctx context.Context, in *UpdatePasswordRequestStatusRequest, opts ...grpc.CallOption) (*UpdatePasswordRequestStatusResponse, error)
}

type issueReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueReportServiceClient(cc grpc.ClientConnInterface) IssueReportServiceClient {
	return &issueReportServiceClient{cc}
}

func (c *issueReportServiceClient) AddReport(ctx context.Context, in *AddReportRequest, opts ...grpc.CallOption) (*AddReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReportResponse)
	err := c.cc.Invoke(ctx, IssueReportService_AddReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) GetUserReports(ctx context.Context, in *GetUserReportsRequest, opts ...grpc.CallOption) (*GetUserReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserReportsResponse)
	err := c.cc.Invoke(ctx, IssueReportService_GetUserReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) GetAllReports(ctx context.Context, in *GetAllReportsRequest, opts ...grpc.CallOption) (*GetAllReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllReportsResponse)
	err := c.cc.Invoke(ctx, IssueReportService_GetAllReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) DeleteReport(ctx context.Context, in *DeleteReportRequest, opts ...grpc.CallOption) (*DeleteReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReportResponse)
	err := c.cc.Invoke(ctx, IssueReportService_DeleteReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) UpdateReportStatus(ctx context.Context, in *UpdateReportStatusRequest, opts ...grpc.CallOption) (*UpdateReportStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReportStatusResponse)
	err := c.cc.Invoke(ctx, IssueReportService_UpdateReportStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) AddPasswordRequest(ctx context.Context, in *AddPasswordMessageRequest, opts ...grpc.CallOption) (*AddPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPasswordResponse)
	err := c.cc.Invoke(ctx, IssueReportService_AddPasswordRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) GetAllPasswordRequests(ctx context.Context, in *GetAllPasswordRequestsRequest, opts ...grpc.CallOption) (*GetAllPasswordRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPasswordRequestsResponse)
	err := c.cc.Invoke(ctx, IssueReportService_GetAllPasswordRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueReportServiceClient) UpdateRequestStatus(ctx context.Context, in *UpdatePasswordRequestStatusRequest, opts ...grpc.CallOption) (*UpdatePasswordRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordRequestStatusResponse)
	err := c.cc.Invoke(ctx, IssueReportService_UpdateRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueReportServiceServer is the server API for IssueReportService service.
// All implementations must embed UnimplementedIssueReportServiceServer
// for forward compatibility.
//
// The user report service definition
type IssueReportServiceServer interface {
	AddReport(context.Context, *AddReportRequest) (*AddReportResponse, error)
	GetUserReports(context.Context, *GetUserReportsRequest) (*GetUserReportsResponse, error)
	GetAllReports(context.Context, *GetAllReportsRequest) (*GetAllReportsResponse, error)
	DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error)
	UpdateReportStatus(context.Context, *UpdateReportStatusRequest) (*UpdateReportStatusResponse, error)
	AddPasswordRequest(context.Context, *AddPasswordMessageRequest) (*AddPasswordResponse, error)
	GetAllPasswordRequests(context.Context, *GetAllPasswordRequestsRequest) (*GetAllPasswordRequestsResponse, error)
	UpdateRequestStatus(context.Context, *UpdatePasswordRequestStatusRequest) (*UpdatePasswordRequestStatusResponse, error)
	mustEmbedUnimplementedIssueReportServiceServer()
}

// UnimplementedIssueReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIssueReportServiceServer struct{}

func (UnimplementedIssueReportServiceServer) AddReport(context.Context, *AddReportRequest) (*AddReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReport not implemented")
}
func (UnimplementedIssueReportServiceServer) GetUserReports(context.Context, *GetUserReportsRequest) (*GetUserReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReports not implemented")
}
func (UnimplementedIssueReportServiceServer) GetAllReports(context.Context, *GetAllReportsRequest) (*GetAllReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllReports not implemented")
}
func (UnimplementedIssueReportServiceServer) DeleteReport(context.Context, *DeleteReportRequest) (*DeleteReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (UnimplementedIssueReportServiceServer) UpdateReportStatus(context.Context, *UpdateReportStatusRequest) (*UpdateReportStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportStatus not implemented")
}
func (UnimplementedIssueReportServiceServer) AddPasswordRequest(context.Context, *AddPasswordMessageRequest) (*AddPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPasswordRequest not implemented")
}
func (UnimplementedIssueReportServiceServer) GetAllPasswordRequests(context.Context, *GetAllPasswordRequestsRequest) (*GetAllPasswordRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPasswordRequests not implemented")
}
func (UnimplementedIssueReportServiceServer) UpdateRequestStatus(context.Context, *UpdatePasswordRequestStatusRequest) (*UpdatePasswordRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequestStatus not implemented")
}
func (UnimplementedIssueReportServiceServer) mustEmbedUnimplementedIssueReportServiceServer() {}
func (UnimplementedIssueReportServiceServer) testEmbeddedByValue()                            {}

// UnsafeIssueReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueReportServiceServer will
// result in compilation errors.
type UnsafeIssueReportServiceServer interface {
	mustEmbedUnimplementedIssueReportServiceServer()
}

func RegisterIssueReportServiceServer(s grpc.ServiceRegistrar, srv IssueReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedIssueReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IssueReportService_ServiceDesc, srv)
}

func _IssueReportService_AddReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).AddReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_AddReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).AddReport(ctx, req.(*AddReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_GetUserReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).GetUserReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_GetUserReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).GetUserReports(ctx, req.(*GetUserReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_GetAllReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).GetAllReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_GetAllReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).GetAllReports(ctx, req.(*GetAllReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_DeleteReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).DeleteReport(ctx, req.(*DeleteReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_UpdateReportStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).UpdateReportStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_UpdateReportStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).UpdateReportStatus(ctx, req.(*UpdateReportStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_AddPasswordRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPasswordMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).AddPasswordRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_AddPasswordRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).AddPasswordRequest(ctx, req.(*AddPasswordMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_GetAllPasswordRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPasswordRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).GetAllPasswordRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_GetAllPasswordRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).GetAllPasswordRequests(ctx, req.(*GetAllPasswordRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueReportService_UpdateRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueReportServiceServer).UpdateRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueReportService_UpdateRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueReportServiceServer).UpdateRequestStatus(ctx, req.(*UpdatePasswordRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueReportService_ServiceDesc is the grpc.ServiceDesc for IssueReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "issue_report_service.IssueReportService",
	HandlerType: (*IssueReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddReport",
			Handler:    _IssueReportService_AddReport_Handler,
		},
		{
			MethodName: "GetUserReports",
			Handler:    _IssueReportService_GetUserReports_Handler,
		},
		{
			MethodName: "GetAllReports",
			Handler:    _IssueReportService_GetAllReports_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _IssueReportService_DeleteReport_Handler,
		},
		{
			MethodName: "UpdateReportStatus",
			Handler:    _IssueReportService_UpdateReportStatus_Handler,
		},
		{
			MethodName: "AddPasswordRequest",
			Handler:    _IssueReportService_AddPasswordRequest_Handler,
		},
		{
			MethodName: "GetAllPasswordRequests",
			Handler:    _IssueReportService_GetAllPasswordRequests_Handler,
		},
		{
			MethodName: "UpdateRequestStatus",
			Handler:    _IssueReportService_UpdateRequestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issue_report_service.proto",
}
