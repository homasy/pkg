// supply_chain_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: supply_chain_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SupplyChainService_CreateStockItem_FullMethodName           = "/supply_chain.SupplyChainService/CreateStockItem"
	SupplyChainService_GetStockItem_FullMethodName              = "/supply_chain.SupplyChainService/GetStockItem"
	SupplyChainService_UpdateStockItem_FullMethodName           = "/supply_chain.SupplyChainService/UpdateStockItem"
	SupplyChainService_ListStockItems_FullMethodName            = "/supply_chain.SupplyChainService/ListStockItems"
	SupplyChainService_GetStockLevels_FullMethodName            = "/supply_chain.SupplyChainService/GetStockLevels"
	SupplyChainService_GetExpiringItems_FullMethodName          = "/supply_chain.SupplyChainService/GetExpiringItems"
	SupplyChainService_GetItemsBelowReorderLevel_FullMethodName = "/supply_chain.SupplyChainService/GetItemsBelowReorderLevel"
	SupplyChainService_CreateStore_FullMethodName               = "/supply_chain.SupplyChainService/CreateStore"
	SupplyChainService_ListStores_FullMethodName                = "/supply_chain.SupplyChainService/ListStores"
	SupplyChainService_CreateSupplier_FullMethodName            = "/supply_chain.SupplyChainService/CreateSupplier"
	SupplyChainService_ListSuppliers_FullMethodName             = "/supply_chain.SupplyChainService/ListSuppliers"
	SupplyChainService_CreateRequisition_FullMethodName         = "/supply_chain.SupplyChainService/CreateRequisition"
	SupplyChainService_ApproveRequisition_FullMethodName        = "/supply_chain.SupplyChainService/ApproveRequisition"
	SupplyChainService_GetRequisition_FullMethodName            = "/supply_chain.SupplyChainService/GetRequisition"
	SupplyChainService_ListRequisitions_FullMethodName          = "/supply_chain.SupplyChainService/ListRequisitions"
	SupplyChainService_CreateLPO_FullMethodName                 = "/supply_chain.SupplyChainService/CreateLPO"
	SupplyChainService_ApproveLPO_FullMethodName                = "/supply_chain.SupplyChainService/ApproveLPO"
	SupplyChainService_GetLPO_FullMethodName                    = "/supply_chain.SupplyChainService/GetLPO"
	SupplyChainService_ListLPOs_FullMethodName                  = "/supply_chain.SupplyChainService/ListLPOs"
	SupplyChainService_CreateGRN_FullMethodName                 = "/supply_chain.SupplyChainService/CreateGRN"
	SupplyChainService_PerformQualityCheck_FullMethodName       = "/supply_chain.SupplyChainService/PerformQualityCheck"
	SupplyChainService_GetGRN_FullMethodName                    = "/supply_chain.SupplyChainService/GetGRN"
	SupplyChainService_ListGRNs_FullMethodName                  = "/supply_chain.SupplyChainService/ListGRNs"
	SupplyChainService_CreateStockAdjustment_FullMethodName     = "/supply_chain.SupplyChainService/CreateStockAdjustment"
	SupplyChainService_ListStockAdjustments_FullMethodName      = "/supply_chain.SupplyChainService/ListStockAdjustments"
	SupplyChainService_ApproveStockAdjustment_FullMethodName    = "/supply_chain.SupplyChainService/ApproveStockAdjustment"
	SupplyChainService_GetStockAdjustment_FullMethodName        = "/supply_chain.SupplyChainService/GetStockAdjustment"
	SupplyChainService_CreateInterStoreTransfer_FullMethodName  = "/supply_chain.SupplyChainService/CreateInterStoreTransfer"
	SupplyChainService_ApproveInterStoreTransfer_FullMethodName = "/supply_chain.SupplyChainService/ApproveInterStoreTransfer"
	SupplyChainService_ReceiveInterStoreTransfer_FullMethodName = "/supply_chain.SupplyChainService/ReceiveInterStoreTransfer"
	SupplyChainService_GetInterStoreTransfer_FullMethodName     = "/supply_chain.SupplyChainService/GetInterStoreTransfer"
	SupplyChainService_ListInterStoreTransfers_FullMethodName   = "/supply_chain.SupplyChainService/ListInterStoreTransfers"
	SupplyChainService_CreateCreditNote_FullMethodName          = "/supply_chain.SupplyChainService/CreateCreditNote"
	SupplyChainService_ApproveCreditNote_FullMethodName         = "/supply_chain.SupplyChainService/ApproveCreditNote"
	SupplyChainService_GetCreditNote_FullMethodName             = "/supply_chain.SupplyChainService/GetCreditNote"
	SupplyChainService_ListCreditNotes_FullMethodName           = "/supply_chain.SupplyChainService/ListCreditNotes"
)

// SupplyChainServiceClient is the client API for SupplyChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupplyChainServiceClient interface {
	// Stock Item Management
	CreateStockItem(ctx context.Context, in *CreateStockItemRequest, opts ...grpc.CallOption) (*CreateStockItemResponse, error)
	GetStockItem(ctx context.Context, in *GetStockItemRequest, opts ...grpc.CallOption) (*GetStockItemResponse, error)
	UpdateStockItem(ctx context.Context, in *UpdateStockItemRequest, opts ...grpc.CallOption) (*UpdateStockItemResponse, error)
	ListStockItems(ctx context.Context, in *ListStockItemsRequest, opts ...grpc.CallOption) (*ListStockItemsResponse, error)
	GetStockLevels(ctx context.Context, in *GetStockLevelsRequest, opts ...grpc.CallOption) (*GetStockLevelsResponse, error)
	GetExpiringItems(ctx context.Context, in *GetExpiringItemsRequest, opts ...grpc.CallOption) (*GetExpiringItemsResponse, error)
	GetItemsBelowReorderLevel(ctx context.Context, in *GetItemsBelowReorderLevelRequest, opts ...grpc.CallOption) (*GetItemsBelowReorderLevelResponse, error)
	// Store Management
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error)
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// Supplier Management
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error)
	// Requisition Management
	CreateRequisition(ctx context.Context, in *CreateRequisitionRequest, opts ...grpc.CallOption) (*CreateRequisitionResponse, error)
	ApproveRequisition(ctx context.Context, in *ApproveRequisitionRequest, opts ...grpc.CallOption) (*ApproveRequisitionResponse, error)
	GetRequisition(ctx context.Context, in *GetRequisitionRequest, opts ...grpc.CallOption) (*GetRequisitionResponse, error)
	ListRequisitions(ctx context.Context, in *ListRequisitionsRequest, opts ...grpc.CallOption) (*ListRequisitionsResponse, error)
	// LPO Management
	CreateLPO(ctx context.Context, in *CreateLPORequest, opts ...grpc.CallOption) (*CreateLPOResponse, error)
	ApproveLPO(ctx context.Context, in *ApproveLPORequest, opts ...grpc.CallOption) (*ApproveLPOResponse, error)
	GetLPO(ctx context.Context, in *GetLPORequest, opts ...grpc.CallOption) (*GetLPOResponse, error)
	ListLPOs(ctx context.Context, in *ListLPOsRequest, opts ...grpc.CallOption) (*ListLPOsResponse, error)
	// GRN Management
	CreateGRN(ctx context.Context, in *CreateGRNRequest, opts ...grpc.CallOption) (*CreateGRNResponse, error)
	PerformQualityCheck(ctx context.Context, in *PerformQualityCheckRequest, opts ...grpc.CallOption) (*PerformQualityCheckResponse, error)
	GetGRN(ctx context.Context, in *GetGRNRequest, opts ...grpc.CallOption) (*GetGRNResponse, error)
	ListGRNs(ctx context.Context, in *ListGRNsRequest, opts ...grpc.CallOption) (*ListGRNsResponse, error)
	// Stock Adjustment
	CreateStockAdjustment(ctx context.Context, in *CreateStockAdjustmentRequest, opts ...grpc.CallOption) (*CreateStockAdjustmentResponse, error)
	ListStockAdjustments(ctx context.Context, in *ListStockAdjustmentsRequest, opts ...grpc.CallOption) (*ListStockAdjustmentsResponse, error)
	ApproveStockAdjustment(ctx context.Context, in *ApproveStockAdjustmentRequest, opts ...grpc.CallOption) (*ApproveStockAdjustmentResponse, error)
	GetStockAdjustment(ctx context.Context, in *GetStockAdjustmentRequest, opts ...grpc.CallOption) (*GetStockAdjustmentResponse, error)
	// Inter-Store Transfer
	CreateInterStoreTransfer(ctx context.Context, in *CreateInterStoreTransferRequest, opts ...grpc.CallOption) (*CreateInterStoreTransferResponse, error)
	ApproveInterStoreTransfer(ctx context.Context, in *ApproveInterStoreTransferRequest, opts ...grpc.CallOption) (*ApproveInterStoreTransferResponse, error)
	ReceiveInterStoreTransfer(ctx context.Context, in *ReceiveInterStoreTransferRequest, opts ...grpc.CallOption) (*ReceiveInterStoreTransferResponse, error)
	GetInterStoreTransfer(ctx context.Context, in *GetInterStoreTransferRequest, opts ...grpc.CallOption) (*GetInterStoreTransferResponse, error)
	ListInterStoreTransfers(ctx context.Context, in *ListInterStoreTransfersRequest, opts ...grpc.CallOption) (*ListInterStoreTransfersResponse, error)
	// Credit Notes
	CreateCreditNote(ctx context.Context, in *CreateCreditNoteRequest, opts ...grpc.CallOption) (*CreateCreditNoteResponse, error)
	ApproveCreditNote(ctx context.Context, in *ApproveCreditNoteRequest, opts ...grpc.CallOption) (*ApproveCreditNoteResponse, error)
	GetCreditNote(ctx context.Context, in *GetCreditNoteRequest, opts ...grpc.CallOption) (*GetCreditNoteResponse, error)
	ListCreditNotes(ctx context.Context, in *ListCreditNotesRequest, opts ...grpc.CallOption) (*ListCreditNotesResponse, error)
}

type supplyChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSupplyChainServiceClient(cc grpc.ClientConnInterface) SupplyChainServiceClient {
	return &supplyChainServiceClient{cc}
}

func (c *supplyChainServiceClient) CreateStockItem(ctx context.Context, in *CreateStockItemRequest, opts ...grpc.CallOption) (*CreateStockItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockItemResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateStockItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetStockItem(ctx context.Context, in *GetStockItemRequest, opts ...grpc.CallOption) (*GetStockItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockItemResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetStockItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) UpdateStockItem(ctx context.Context, in *UpdateStockItemRequest, opts ...grpc.CallOption) (*UpdateStockItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockItemResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_UpdateStockItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListStockItems(ctx context.Context, in *ListStockItemsRequest, opts ...grpc.CallOption) (*ListStockItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockItemsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListStockItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetStockLevels(ctx context.Context, in *GetStockLevelsRequest, opts ...grpc.CallOption) (*GetStockLevelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockLevelsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetStockLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetExpiringItems(ctx context.Context, in *GetExpiringItemsRequest, opts ...grpc.CallOption) (*GetExpiringItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpiringItemsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetExpiringItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetItemsBelowReorderLevel(ctx context.Context, in *GetItemsBelowReorderLevelRequest, opts ...grpc.CallOption) (*GetItemsBelowReorderLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemsBelowReorderLevelResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetItemsBelowReorderLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoreResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateSupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListSuppliers(ctx context.Context, in *ListSuppliersRequest, opts ...grpc.CallOption) (*ListSuppliersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSuppliersResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListSuppliers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateRequisition(ctx context.Context, in *CreateRequisitionRequest, opts ...grpc.CallOption) (*CreateRequisitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRequisitionResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateRequisition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ApproveRequisition(ctx context.Context, in *ApproveRequisitionRequest, opts ...grpc.CallOption) (*ApproveRequisitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveRequisitionResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ApproveRequisition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetRequisition(ctx context.Context, in *GetRequisitionRequest, opts ...grpc.CallOption) (*GetRequisitionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRequisitionResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetRequisition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListRequisitions(ctx context.Context, in *ListRequisitionsRequest, opts ...grpc.CallOption) (*ListRequisitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRequisitionsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListRequisitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateLPO(ctx context.Context, in *CreateLPORequest, opts ...grpc.CallOption) (*CreateLPOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLPOResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateLPO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ApproveLPO(ctx context.Context, in *ApproveLPORequest, opts ...grpc.CallOption) (*ApproveLPOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLPOResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ApproveLPO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetLPO(ctx context.Context, in *GetLPORequest, opts ...grpc.CallOption) (*GetLPOResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLPOResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetLPO_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListLPOs(ctx context.Context, in *ListLPOsRequest, opts ...grpc.CallOption) (*ListLPOsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLPOsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListLPOs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateGRN(ctx context.Context, in *CreateGRNRequest, opts ...grpc.CallOption) (*CreateGRNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGRNResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateGRN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) PerformQualityCheck(ctx context.Context, in *PerformQualityCheckRequest, opts ...grpc.CallOption) (*PerformQualityCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformQualityCheckResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_PerformQualityCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetGRN(ctx context.Context, in *GetGRNRequest, opts ...grpc.CallOption) (*GetGRNResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGRNResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetGRN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListGRNs(ctx context.Context, in *ListGRNsRequest, opts ...grpc.CallOption) (*ListGRNsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGRNsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListGRNs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateStockAdjustment(ctx context.Context, in *CreateStockAdjustmentRequest, opts ...grpc.CallOption) (*CreateStockAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockAdjustmentResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateStockAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListStockAdjustments(ctx context.Context, in *ListStockAdjustmentsRequest, opts ...grpc.CallOption) (*ListStockAdjustmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockAdjustmentsResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListStockAdjustments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ApproveStockAdjustment(ctx context.Context, in *ApproveStockAdjustmentRequest, opts ...grpc.CallOption) (*ApproveStockAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveStockAdjustmentResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ApproveStockAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetStockAdjustment(ctx context.Context, in *GetStockAdjustmentRequest, opts ...grpc.CallOption) (*GetStockAdjustmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockAdjustmentResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetStockAdjustment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateInterStoreTransfer(ctx context.Context, in *CreateInterStoreTransferRequest, opts ...grpc.CallOption) (*CreateInterStoreTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInterStoreTransferResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateInterStoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ApproveInterStoreTransfer(ctx context.Context, in *ApproveInterStoreTransferRequest, opts ...grpc.CallOption) (*ApproveInterStoreTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveInterStoreTransferResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ApproveInterStoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ReceiveInterStoreTransfer(ctx context.Context, in *ReceiveInterStoreTransferRequest, opts ...grpc.CallOption) (*ReceiveInterStoreTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveInterStoreTransferResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ReceiveInterStoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetInterStoreTransfer(ctx context.Context, in *GetInterStoreTransferRequest, opts ...grpc.CallOption) (*GetInterStoreTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterStoreTransferResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetInterStoreTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListInterStoreTransfers(ctx context.Context, in *ListInterStoreTransfersRequest, opts ...grpc.CallOption) (*ListInterStoreTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInterStoreTransfersResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListInterStoreTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) CreateCreditNote(ctx context.Context, in *CreateCreditNoteRequest, opts ...grpc.CallOption) (*CreateCreditNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCreditNoteResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_CreateCreditNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ApproveCreditNote(ctx context.Context, in *ApproveCreditNoteRequest, opts ...grpc.CallOption) (*ApproveCreditNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveCreditNoteResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ApproveCreditNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) GetCreditNote(ctx context.Context, in *GetCreditNoteRequest, opts ...grpc.CallOption) (*GetCreditNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCreditNoteResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_GetCreditNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supplyChainServiceClient) ListCreditNotes(ctx context.Context, in *ListCreditNotesRequest, opts ...grpc.CallOption) (*ListCreditNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditNotesResponse)
	err := c.cc.Invoke(ctx, SupplyChainService_ListCreditNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupplyChainServiceServer is the server API for SupplyChainService service.
// All implementations must embed UnimplementedSupplyChainServiceServer
// for forward compatibility.
type SupplyChainServiceServer interface {
	// Stock Item Management
	CreateStockItem(context.Context, *CreateStockItemRequest) (*CreateStockItemResponse, error)
	GetStockItem(context.Context, *GetStockItemRequest) (*GetStockItemResponse, error)
	UpdateStockItem(context.Context, *UpdateStockItemRequest) (*UpdateStockItemResponse, error)
	ListStockItems(context.Context, *ListStockItemsRequest) (*ListStockItemsResponse, error)
	GetStockLevels(context.Context, *GetStockLevelsRequest) (*GetStockLevelsResponse, error)
	GetExpiringItems(context.Context, *GetExpiringItemsRequest) (*GetExpiringItemsResponse, error)
	GetItemsBelowReorderLevel(context.Context, *GetItemsBelowReorderLevelRequest) (*GetItemsBelowReorderLevelResponse, error)
	// Store Management
	CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error)
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// Supplier Management
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error)
	// Requisition Management
	CreateRequisition(context.Context, *CreateRequisitionRequest) (*CreateRequisitionResponse, error)
	ApproveRequisition(context.Context, *ApproveRequisitionRequest) (*ApproveRequisitionResponse, error)
	GetRequisition(context.Context, *GetRequisitionRequest) (*GetRequisitionResponse, error)
	ListRequisitions(context.Context, *ListRequisitionsRequest) (*ListRequisitionsResponse, error)
	// LPO Management
	CreateLPO(context.Context, *CreateLPORequest) (*CreateLPOResponse, error)
	ApproveLPO(context.Context, *ApproveLPORequest) (*ApproveLPOResponse, error)
	GetLPO(context.Context, *GetLPORequest) (*GetLPOResponse, error)
	ListLPOs(context.Context, *ListLPOsRequest) (*ListLPOsResponse, error)
	// GRN Management
	CreateGRN(context.Context, *CreateGRNRequest) (*CreateGRNResponse, error)
	PerformQualityCheck(context.Context, *PerformQualityCheckRequest) (*PerformQualityCheckResponse, error)
	GetGRN(context.Context, *GetGRNRequest) (*GetGRNResponse, error)
	ListGRNs(context.Context, *ListGRNsRequest) (*ListGRNsResponse, error)
	// Stock Adjustment
	CreateStockAdjustment(context.Context, *CreateStockAdjustmentRequest) (*CreateStockAdjustmentResponse, error)
	ListStockAdjustments(context.Context, *ListStockAdjustmentsRequest) (*ListStockAdjustmentsResponse, error)
	ApproveStockAdjustment(context.Context, *ApproveStockAdjustmentRequest) (*ApproveStockAdjustmentResponse, error)
	GetStockAdjustment(context.Context, *GetStockAdjustmentRequest) (*GetStockAdjustmentResponse, error)
	// Inter-Store Transfer
	CreateInterStoreTransfer(context.Context, *CreateInterStoreTransferRequest) (*CreateInterStoreTransferResponse, error)
	ApproveInterStoreTransfer(context.Context, *ApproveInterStoreTransferRequest) (*ApproveInterStoreTransferResponse, error)
	ReceiveInterStoreTransfer(context.Context, *ReceiveInterStoreTransferRequest) (*ReceiveInterStoreTransferResponse, error)
	GetInterStoreTransfer(context.Context, *GetInterStoreTransferRequest) (*GetInterStoreTransferResponse, error)
	ListInterStoreTransfers(context.Context, *ListInterStoreTransfersRequest) (*ListInterStoreTransfersResponse, error)
	// Credit Notes
	CreateCreditNote(context.Context, *CreateCreditNoteRequest) (*CreateCreditNoteResponse, error)
	ApproveCreditNote(context.Context, *ApproveCreditNoteRequest) (*ApproveCreditNoteResponse, error)
	GetCreditNote(context.Context, *GetCreditNoteRequest) (*GetCreditNoteResponse, error)
	ListCreditNotes(context.Context, *ListCreditNotesRequest) (*ListCreditNotesResponse, error)
	mustEmbedUnimplementedSupplyChainServiceServer()
}

// UnimplementedSupplyChainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupplyChainServiceServer struct{}

func (UnimplementedSupplyChainServiceServer) CreateStockItem(context.Context, *CreateStockItemRequest) (*CreateStockItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockItem not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetStockItem(context.Context, *GetStockItemRequest) (*GetStockItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockItem not implemented")
}
func (UnimplementedSupplyChainServiceServer) UpdateStockItem(context.Context, *UpdateStockItemRequest) (*UpdateStockItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockItem not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListStockItems(context.Context, *ListStockItemsRequest) (*ListStockItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockItems not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetStockLevels(context.Context, *GetStockLevelsRequest) (*GetStockLevelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockLevels not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetExpiringItems(context.Context, *GetExpiringItemsRequest) (*GetExpiringItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiringItems not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetItemsBelowReorderLevel(context.Context, *GetItemsBelowReorderLevelRequest) (*GetItemsBelowReorderLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsBelowReorderLevel not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListSuppliers(context.Context, *ListSuppliersRequest) (*ListSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSuppliers not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateRequisition(context.Context, *CreateRequisitionRequest) (*CreateRequisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequisition not implemented")
}
func (UnimplementedSupplyChainServiceServer) ApproveRequisition(context.Context, *ApproveRequisitionRequest) (*ApproveRequisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveRequisition not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetRequisition(context.Context, *GetRequisitionRequest) (*GetRequisitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequisition not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListRequisitions(context.Context, *ListRequisitionsRequest) (*ListRequisitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequisitions not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateLPO(context.Context, *CreateLPORequest) (*CreateLPOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLPO not implemented")
}
func (UnimplementedSupplyChainServiceServer) ApproveLPO(context.Context, *ApproveLPORequest) (*ApproveLPOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLPO not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetLPO(context.Context, *GetLPORequest) (*GetLPOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLPO not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListLPOs(context.Context, *ListLPOsRequest) (*ListLPOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLPOs not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateGRN(context.Context, *CreateGRNRequest) (*CreateGRNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGRN not implemented")
}
func (UnimplementedSupplyChainServiceServer) PerformQualityCheck(context.Context, *PerformQualityCheckRequest) (*PerformQualityCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformQualityCheck not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetGRN(context.Context, *GetGRNRequest) (*GetGRNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGRN not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListGRNs(context.Context, *ListGRNsRequest) (*ListGRNsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGRNs not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateStockAdjustment(context.Context, *CreateStockAdjustmentRequest) (*CreateStockAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockAdjustment not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListStockAdjustments(context.Context, *ListStockAdjustmentsRequest) (*ListStockAdjustmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockAdjustments not implemented")
}
func (UnimplementedSupplyChainServiceServer) ApproveStockAdjustment(context.Context, *ApproveStockAdjustmentRequest) (*ApproveStockAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStockAdjustment not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetStockAdjustment(context.Context, *GetStockAdjustmentRequest) (*GetStockAdjustmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockAdjustment not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateInterStoreTransfer(context.Context, *CreateInterStoreTransferRequest) (*CreateInterStoreTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterStoreTransfer not implemented")
}
func (UnimplementedSupplyChainServiceServer) ApproveInterStoreTransfer(context.Context, *ApproveInterStoreTransferRequest) (*ApproveInterStoreTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveInterStoreTransfer not implemented")
}
func (UnimplementedSupplyChainServiceServer) ReceiveInterStoreTransfer(context.Context, *ReceiveInterStoreTransferRequest) (*ReceiveInterStoreTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveInterStoreTransfer not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetInterStoreTransfer(context.Context, *GetInterStoreTransferRequest) (*GetInterStoreTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterStoreTransfer not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListInterStoreTransfers(context.Context, *ListInterStoreTransfersRequest) (*ListInterStoreTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterStoreTransfers not implemented")
}
func (UnimplementedSupplyChainServiceServer) CreateCreditNote(context.Context, *CreateCreditNoteRequest) (*CreateCreditNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditNote not implemented")
}
func (UnimplementedSupplyChainServiceServer) ApproveCreditNote(context.Context, *ApproveCreditNoteRequest) (*ApproveCreditNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCreditNote not implemented")
}
func (UnimplementedSupplyChainServiceServer) GetCreditNote(context.Context, *GetCreditNoteRequest) (*GetCreditNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditNote not implemented")
}
func (UnimplementedSupplyChainServiceServer) ListCreditNotes(context.Context, *ListCreditNotesRequest) (*ListCreditNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditNotes not implemented")
}
func (UnimplementedSupplyChainServiceServer) mustEmbedUnimplementedSupplyChainServiceServer() {}
func (UnimplementedSupplyChainServiceServer) testEmbeddedByValue()                            {}

// UnsafeSupplyChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupplyChainServiceServer will
// result in compilation errors.
type UnsafeSupplyChainServiceServer interface {
	mustEmbedUnimplementedSupplyChainServiceServer()
}

func RegisterSupplyChainServiceServer(s grpc.ServiceRegistrar, srv SupplyChainServiceServer) {
	// If the following call pancis, it indicates UnimplementedSupplyChainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SupplyChainService_ServiceDesc, srv)
}

func _SupplyChainService_CreateStockItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateStockItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateStockItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateStockItem(ctx, req.(*CreateStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetStockItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetStockItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetStockItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetStockItem(ctx, req.(*GetStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_UpdateStockItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).UpdateStockItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_UpdateStockItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).UpdateStockItem(ctx, req.(*UpdateStockItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListStockItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListStockItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListStockItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListStockItems(ctx, req.(*ListStockItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetStockLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockLevelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetStockLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetStockLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetStockLevels(ctx, req.(*GetStockLevelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetExpiringItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpiringItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetExpiringItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetExpiringItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetExpiringItems(ctx, req.(*GetExpiringItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetItemsBelowReorderLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsBelowReorderLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetItemsBelowReorderLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetItemsBelowReorderLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetItemsBelowReorderLevel(ctx, req.(*GetItemsBelowReorderLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateSupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListSuppliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSuppliersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListSuppliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListSuppliers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListSuppliers(ctx, req.(*ListSuppliersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateRequisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateRequisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateRequisition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateRequisition(ctx, req.(*CreateRequisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ApproveRequisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ApproveRequisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ApproveRequisition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ApproveRequisition(ctx, req.(*ApproveRequisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetRequisition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequisitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetRequisition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetRequisition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetRequisition(ctx, req.(*GetRequisitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListRequisitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequisitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListRequisitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListRequisitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListRequisitions(ctx, req.(*ListRequisitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateLPO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLPORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateLPO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateLPO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateLPO(ctx, req.(*CreateLPORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ApproveLPO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLPORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ApproveLPO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ApproveLPO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ApproveLPO(ctx, req.(*ApproveLPORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetLPO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLPORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetLPO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetLPO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetLPO(ctx, req.(*GetLPORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListLPOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLPOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListLPOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListLPOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListLPOs(ctx, req.(*ListLPOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateGRN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGRNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateGRN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateGRN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateGRN(ctx, req.(*CreateGRNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_PerformQualityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformQualityCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).PerformQualityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_PerformQualityCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).PerformQualityCheck(ctx, req.(*PerformQualityCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetGRN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGRNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetGRN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetGRN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetGRN(ctx, req.(*GetGRNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListGRNs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGRNsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListGRNs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListGRNs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListGRNs(ctx, req.(*ListGRNsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateStockAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateStockAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateStockAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateStockAdjustment(ctx, req.(*CreateStockAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListStockAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockAdjustmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListStockAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListStockAdjustments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListStockAdjustments(ctx, req.(*ListStockAdjustmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ApproveStockAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStockAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ApproveStockAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ApproveStockAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ApproveStockAdjustment(ctx, req.(*ApproveStockAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetStockAdjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockAdjustmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetStockAdjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetStockAdjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetStockAdjustment(ctx, req.(*GetStockAdjustmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateInterStoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterStoreTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateInterStoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateInterStoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateInterStoreTransfer(ctx, req.(*CreateInterStoreTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ApproveInterStoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveInterStoreTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ApproveInterStoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ApproveInterStoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ApproveInterStoreTransfer(ctx, req.(*ApproveInterStoreTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ReceiveInterStoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveInterStoreTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ReceiveInterStoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ReceiveInterStoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ReceiveInterStoreTransfer(ctx, req.(*ReceiveInterStoreTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetInterStoreTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterStoreTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetInterStoreTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetInterStoreTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetInterStoreTransfer(ctx, req.(*GetInterStoreTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListInterStoreTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInterStoreTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListInterStoreTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListInterStoreTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListInterStoreTransfers(ctx, req.(*ListInterStoreTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_CreateCreditNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).CreateCreditNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_CreateCreditNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).CreateCreditNote(ctx, req.(*CreateCreditNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ApproveCreditNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveCreditNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ApproveCreditNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ApproveCreditNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ApproveCreditNote(ctx, req.(*ApproveCreditNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_GetCreditNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).GetCreditNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_GetCreditNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).GetCreditNote(ctx, req.(*GetCreditNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupplyChainService_ListCreditNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupplyChainServiceServer).ListCreditNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SupplyChainService_ListCreditNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupplyChainServiceServer).ListCreditNotes(ctx, req.(*ListCreditNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SupplyChainService_ServiceDesc is the grpc.ServiceDesc for SupplyChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupplyChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "supply_chain.SupplyChainService",
	HandlerType: (*SupplyChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStockItem",
			Handler:    _SupplyChainService_CreateStockItem_Handler,
		},
		{
			MethodName: "GetStockItem",
			Handler:    _SupplyChainService_GetStockItem_Handler,
		},
		{
			MethodName: "UpdateStockItem",
			Handler:    _SupplyChainService_UpdateStockItem_Handler,
		},
		{
			MethodName: "ListStockItems",
			Handler:    _SupplyChainService_ListStockItems_Handler,
		},
		{
			MethodName: "GetStockLevels",
			Handler:    _SupplyChainService_GetStockLevels_Handler,
		},
		{
			MethodName: "GetExpiringItems",
			Handler:    _SupplyChainService_GetExpiringItems_Handler,
		},
		{
			MethodName: "GetItemsBelowReorderLevel",
			Handler:    _SupplyChainService_GetItemsBelowReorderLevel_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _SupplyChainService_CreateStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _SupplyChainService_ListStores_Handler,
		},
		{
			MethodName: "CreateSupplier",
			Handler:    _SupplyChainService_CreateSupplier_Handler,
		},
		{
			MethodName: "ListSuppliers",
			Handler:    _SupplyChainService_ListSuppliers_Handler,
		},
		{
			MethodName: "CreateRequisition",
			Handler:    _SupplyChainService_CreateRequisition_Handler,
		},
		{
			MethodName: "ApproveRequisition",
			Handler:    _SupplyChainService_ApproveRequisition_Handler,
		},
		{
			MethodName: "GetRequisition",
			Handler:    _SupplyChainService_GetRequisition_Handler,
		},
		{
			MethodName: "ListRequisitions",
			Handler:    _SupplyChainService_ListRequisitions_Handler,
		},
		{
			MethodName: "CreateLPO",
			Handler:    _SupplyChainService_CreateLPO_Handler,
		},
		{
			MethodName: "ApproveLPO",
			Handler:    _SupplyChainService_ApproveLPO_Handler,
		},
		{
			MethodName: "GetLPO",
			Handler:    _SupplyChainService_GetLPO_Handler,
		},
		{
			MethodName: "ListLPOs",
			Handler:    _SupplyChainService_ListLPOs_Handler,
		},
		{
			MethodName: "CreateGRN",
			Handler:    _SupplyChainService_CreateGRN_Handler,
		},
		{
			MethodName: "PerformQualityCheck",
			Handler:    _SupplyChainService_PerformQualityCheck_Handler,
		},
		{
			MethodName: "GetGRN",
			Handler:    _SupplyChainService_GetGRN_Handler,
		},
		{
			MethodName: "ListGRNs",
			Handler:    _SupplyChainService_ListGRNs_Handler,
		},
		{
			MethodName: "CreateStockAdjustment",
			Handler:    _SupplyChainService_CreateStockAdjustment_Handler,
		},
		{
			MethodName: "ListStockAdjustments",
			Handler:    _SupplyChainService_ListStockAdjustments_Handler,
		},
		{
			MethodName: "ApproveStockAdjustment",
			Handler:    _SupplyChainService_ApproveStockAdjustment_Handler,
		},
		{
			MethodName: "GetStockAdjustment",
			Handler:    _SupplyChainService_GetStockAdjustment_Handler,
		},
		{
			MethodName: "CreateInterStoreTransfer",
			Handler:    _SupplyChainService_CreateInterStoreTransfer_Handler,
		},
		{
			MethodName: "ApproveInterStoreTransfer",
			Handler:    _SupplyChainService_ApproveInterStoreTransfer_Handler,
		},
		{
			MethodName: "ReceiveInterStoreTransfer",
			Handler:    _SupplyChainService_ReceiveInterStoreTransfer_Handler,
		},
		{
			MethodName: "GetInterStoreTransfer",
			Handler:    _SupplyChainService_GetInterStoreTransfer_Handler,
		},
		{
			MethodName: "ListInterStoreTransfers",
			Handler:    _SupplyChainService_ListInterStoreTransfers_Handler,
		},
		{
			MethodName: "CreateCreditNote",
			Handler:    _SupplyChainService_CreateCreditNote_Handler,
		},
		{
			MethodName: "ApproveCreditNote",
			Handler:    _SupplyChainService_ApproveCreditNote_Handler,
		},
		{
			MethodName: "GetCreditNote",
			Handler:    _SupplyChainService_GetCreditNote_Handler,
		},
		{
			MethodName: "ListCreditNotes",
			Handler:    _SupplyChainService_ListCreditNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supply_chain_service.proto",
}
