// human_resource_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: human_resource_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HRService_RegisterStaff_FullMethodName           = "/human_resource_service.HRService/RegisterStaff"
	HRService_GetStaff_FullMethodName                = "/human_resource_service.HRService/GetStaff"
	HRService_UpdateStaff_FullMethodName             = "/human_resource_service.HRService/UpdateStaff"
	HRService_DeleteStaff_FullMethodName             = "/human_resource_service.HRService/DeleteStaff"
	HRService_ListStaff_FullMethodName               = "/human_resource_service.HRService/ListStaff"
	HRService_IsStaffAvailable_FullMethodName        = "/human_resource_service.HRService/IsStaffAvailable"
	HRService_CreatePayroll_FullMethodName           = "/human_resource_service.HRService/CreatePayroll"
	HRService_GetPayroll_FullMethodName              = "/human_resource_service.HRService/GetPayroll"
	HRService_UpdatePayroll_FullMethodName           = "/human_resource_service.HRService/UpdatePayroll"
	HRService_DeletePayroll_FullMethodName           = "/human_resource_service.HRService/DeletePayroll"
	HRService_ListPayrolls_FullMethodName            = "/human_resource_service.HRService/ListPayrolls"
	HRService_AddPayrollDetail_FullMethodName        = "/human_resource_service.HRService/AddPayrollDetail"
	HRService_GetPayslip_FullMethodName              = "/human_resource_service.HRService/GetPayslip"
	HRService_CreateRequestLeave_FullMethodName      = "/human_resource_service.HRService/CreateRequestLeave"
	HRService_GetLeave_FullMethodName                = "/human_resource_service.HRService/GetLeave"
	HRService_ApproveLeave_FullMethodName            = "/human_resource_service.HRService/ApproveLeave"
	HRService_ListLeaveRequests_FullMethodName       = "/human_resource_service.HRService/ListLeaveRequests"
	HRService_GetLeaveBalance_FullMethodName         = "/human_resource_service.HRService/GetLeaveBalance"
	HRService_GetStaffLeaveBalances_FullMethodName   = "/human_resource_service.HRService/GetStaffLeaveBalances"
	HRService_SetLeaveEntitlement_FullMethodName     = "/human_resource_service.HRService/SetLeaveEntitlement"
	HRService_CreateDepartment_FullMethodName        = "/human_resource_service.HRService/CreateDepartment"
	HRService_GetDepartment_FullMethodName           = "/human_resource_service.HRService/GetDepartment"
	HRService_UpdateDepartment_FullMethodName        = "/human_resource_service.HRService/UpdateDepartment"
	HRService_DeleteDepartment_FullMethodName        = "/human_resource_service.HRService/DeleteDepartment"
	HRService_ListDepartments_FullMethodName         = "/human_resource_service.HRService/ListDepartments"
	HRService_RecordAttendance_FullMethodName        = "/human_resource_service.HRService/RecordAttendance"
	HRService_GetAttendance_FullMethodName           = "/human_resource_service.HRService/GetAttendance"
	HRService_ListAttendance_FullMethodName          = "/human_resource_service.HRService/ListAttendance"
	HRService_GetAttendanceStatistics_FullMethodName = "/human_resource_service.HRService/GetAttendanceStatistics"
	HRService_AddStaffBenefit_FullMethodName         = "/human_resource_service.HRService/AddStaffBenefit"
	HRService_RemoveStaffBenefit_FullMethodName      = "/human_resource_service.HRService/RemoveStaffBenefit"
	HRService_ListStaffBenefits_FullMethodName       = "/human_resource_service.HRService/ListStaffBenefits"
)

// HRServiceClient is the client API for HRService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// HRService defines the service for managing staff, payroll, leave requests, and departments
type HRServiceClient interface {
	RegisterStaff(ctx context.Context, in *RegisterStaffRequest, opts ...grpc.CallOption) (*RegisterStaffResponse, error)
	GetStaff(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*GetStaffResponse, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error)
	DeleteStaff(ctx context.Context, in *DeleteStaffRequest, opts ...grpc.CallOption) (*DeleteStaffResponse, error)
	ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error)
	IsStaffAvailable(ctx context.Context, in *IsStaffAvailableRequest, opts ...grpc.CallOption) (*IsStaffAvailableResponse, error)
	CreatePayroll(ctx context.Context, in *CreatePayrollRequest, opts ...grpc.CallOption) (*CreatePayrollResponse, error)
	GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*GetPayrollResponse, error)
	UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*UpdatePayrollResponse, error)
	DeletePayroll(ctx context.Context, in *DeletePayrollRequest, opts ...grpc.CallOption) (*DeletePayrollResponse, error)
	ListPayrolls(ctx context.Context, in *ListPayrollsRequest, opts ...grpc.CallOption) (*ListPayrollsResponse, error)
	AddPayrollDetail(ctx context.Context, in *AddPayrollDetailRequest, opts ...grpc.CallOption) (*AddPayrollDetailResponse, error)
	GetPayslip(ctx context.Context, in *GetPayslipRequest, opts ...grpc.CallOption) (*GetPayslipResponse, error)
	CreateRequestLeave(ctx context.Context, in *RequestLeaveRequest, opts ...grpc.CallOption) (*RequestLeaveResponse, error)
	GetLeave(ctx context.Context, in *GetLeaveRequest, opts ...grpc.CallOption) (*GetLeaveResponse, error)
	ApproveLeave(ctx context.Context, in *ApproveLeaveRequest, opts ...grpc.CallOption) (*ApproveLeaveResponse, error)
	ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error)
	GetLeaveBalance(ctx context.Context, in *GetLeaveBalanceRequest, opts ...grpc.CallOption) (*GetLeaveBalanceResponse, error)
	GetStaffLeaveBalances(ctx context.Context, in *GetStaffLeaveBalancesRequest, opts ...grpc.CallOption) (*GetStaffLeaveBalancesResponse, error)
	SetLeaveEntitlement(ctx context.Context, in *SetLeaveEntitlementRequest, opts ...grpc.CallOption) (*SetLeaveEntitlementResponse, error)
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error)
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentResponse, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error)
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	RecordAttendance(ctx context.Context, in *RecordAttendanceRequest, opts ...grpc.CallOption) (*RecordAttendanceResponse, error)
	GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error)
	ListAttendance(ctx context.Context, in *ListAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceResponse, error)
	GetAttendanceStatistics(ctx context.Context, in *GetAttendanceStatisticsRequest, opts ...grpc.CallOption) (*GetAttendanceStatisticsResponse, error)
	// ------------------ Staff Benefits/Deductions Endpoints ------------------
	AddStaffBenefit(ctx context.Context, in *AddStaffBenefitRequest, opts ...grpc.CallOption) (*AddStaffBenefitResponse, error)
	RemoveStaffBenefit(ctx context.Context, in *RemoveStaffBenefitRequest, opts ...grpc.CallOption) (*RemoveStaffBenefitResponse, error)
	ListStaffBenefits(ctx context.Context, in *ListStaffBenefitsRequest, opts ...grpc.CallOption) (*ListStaffBenefitsResponse, error)
}

type hRServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHRServiceClient(cc grpc.ClientConnInterface) HRServiceClient {
	return &hRServiceClient{cc}
}

func (c *hRServiceClient) RegisterStaff(ctx context.Context, in *RegisterStaffRequest, opts ...grpc.CallOption) (*RegisterStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterStaffResponse)
	err := c.cc.Invoke(ctx, HRService_RegisterStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetStaff(ctx context.Context, in *GetStaffRequest, opts ...grpc.CallOption) (*GetStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffResponse)
	err := c.cc.Invoke(ctx, HRService_GetStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStaffResponse)
	err := c.cc.Invoke(ctx, HRService_UpdateStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) DeleteStaff(ctx context.Context, in *DeleteStaffRequest, opts ...grpc.CallOption) (*DeleteStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStaffResponse)
	err := c.cc.Invoke(ctx, HRService_DeleteStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffResponse)
	err := c.cc.Invoke(ctx, HRService_ListStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) IsStaffAvailable(ctx context.Context, in *IsStaffAvailableRequest, opts ...grpc.CallOption) (*IsStaffAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsStaffAvailableResponse)
	err := c.cc.Invoke(ctx, HRService_IsStaffAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) CreatePayroll(ctx context.Context, in *CreatePayrollRequest, opts ...grpc.CallOption) (*CreatePayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePayrollResponse)
	err := c.cc.Invoke(ctx, HRService_CreatePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*GetPayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayrollResponse)
	err := c.cc.Invoke(ctx, HRService_GetPayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*UpdatePayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePayrollResponse)
	err := c.cc.Invoke(ctx, HRService_UpdatePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) DeletePayroll(ctx context.Context, in *DeletePayrollRequest, opts ...grpc.CallOption) (*DeletePayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePayrollResponse)
	err := c.cc.Invoke(ctx, HRService_DeletePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListPayrolls(ctx context.Context, in *ListPayrollsRequest, opts ...grpc.CallOption) (*ListPayrollsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPayrollsResponse)
	err := c.cc.Invoke(ctx, HRService_ListPayrolls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) AddPayrollDetail(ctx context.Context, in *AddPayrollDetailRequest, opts ...grpc.CallOption) (*AddPayrollDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPayrollDetailResponse)
	err := c.cc.Invoke(ctx, HRService_AddPayrollDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetPayslip(ctx context.Context, in *GetPayslipRequest, opts ...grpc.CallOption) (*GetPayslipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPayslipResponse)
	err := c.cc.Invoke(ctx, HRService_GetPayslip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) CreateRequestLeave(ctx context.Context, in *RequestLeaveRequest, opts ...grpc.CallOption) (*RequestLeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestLeaveResponse)
	err := c.cc.Invoke(ctx, HRService_CreateRequestLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetLeave(ctx context.Context, in *GetLeaveRequest, opts ...grpc.CallOption) (*GetLeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaveResponse)
	err := c.cc.Invoke(ctx, HRService_GetLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ApproveLeave(ctx context.Context, in *ApproveLeaveRequest, opts ...grpc.CallOption) (*ApproveLeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveLeaveResponse)
	err := c.cc.Invoke(ctx, HRService_ApproveLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListLeaveRequests(ctx context.Context, in *ListLeaveRequestsRequest, opts ...grpc.CallOption) (*ListLeaveRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeaveRequestsResponse)
	err := c.cc.Invoke(ctx, HRService_ListLeaveRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetLeaveBalance(ctx context.Context, in *GetLeaveBalanceRequest, opts ...grpc.CallOption) (*GetLeaveBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaveBalanceResponse)
	err := c.cc.Invoke(ctx, HRService_GetLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetStaffLeaveBalances(ctx context.Context, in *GetStaffLeaveBalancesRequest, opts ...grpc.CallOption) (*GetStaffLeaveBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaffLeaveBalancesResponse)
	err := c.cc.Invoke(ctx, HRService_GetStaffLeaveBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) SetLeaveEntitlement(ctx context.Context, in *SetLeaveEntitlementRequest, opts ...grpc.CallOption) (*SetLeaveEntitlementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLeaveEntitlementResponse)
	err := c.cc.Invoke(ctx, HRService_SetLeaveEntitlement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, HRService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentResponse)
	err := c.cc.Invoke(ctx, HRService_GetDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDepartmentResponse)
	err := c.cc.Invoke(ctx, HRService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDepartmentResponse)
	err := c.cc.Invoke(ctx, HRService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, HRService_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) RecordAttendance(ctx context.Context, in *RecordAttendanceRequest, opts ...grpc.CallOption) (*RecordAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordAttendanceResponse)
	err := c.cc.Invoke(ctx, HRService_RecordAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetAttendance(ctx context.Context, in *GetAttendanceRequest, opts ...grpc.CallOption) (*GetAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceResponse)
	err := c.cc.Invoke(ctx, HRService_GetAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListAttendance(ctx context.Context, in *ListAttendanceRequest, opts ...grpc.CallOption) (*ListAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttendanceResponse)
	err := c.cc.Invoke(ctx, HRService_ListAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) GetAttendanceStatistics(ctx context.Context, in *GetAttendanceStatisticsRequest, opts ...grpc.CallOption) (*GetAttendanceStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAttendanceStatisticsResponse)
	err := c.cc.Invoke(ctx, HRService_GetAttendanceStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) AddStaffBenefit(ctx context.Context, in *AddStaffBenefitRequest, opts ...grpc.CallOption) (*AddStaffBenefitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStaffBenefitResponse)
	err := c.cc.Invoke(ctx, HRService_AddStaffBenefit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) RemoveStaffBenefit(ctx context.Context, in *RemoveStaffBenefitRequest, opts ...grpc.CallOption) (*RemoveStaffBenefitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStaffBenefitResponse)
	err := c.cc.Invoke(ctx, HRService_RemoveStaffBenefit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hRServiceClient) ListStaffBenefits(ctx context.Context, in *ListStaffBenefitsRequest, opts ...grpc.CallOption) (*ListStaffBenefitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffBenefitsResponse)
	err := c.cc.Invoke(ctx, HRService_ListStaffBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HRServiceServer is the server API for HRService service.
// All implementations must embed UnimplementedHRServiceServer
// for forward compatibility.
//
// HRService defines the service for managing staff, payroll, leave requests, and departments
type HRServiceServer interface {
	RegisterStaff(context.Context, *RegisterStaffRequest) (*RegisterStaffResponse, error)
	GetStaff(context.Context, *GetStaffRequest) (*GetStaffResponse, error)
	UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error)
	DeleteStaff(context.Context, *DeleteStaffRequest) (*DeleteStaffResponse, error)
	ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error)
	IsStaffAvailable(context.Context, *IsStaffAvailableRequest) (*IsStaffAvailableResponse, error)
	CreatePayroll(context.Context, *CreatePayrollRequest) (*CreatePayrollResponse, error)
	GetPayroll(context.Context, *GetPayrollRequest) (*GetPayrollResponse, error)
	UpdatePayroll(context.Context, *UpdatePayrollRequest) (*UpdatePayrollResponse, error)
	DeletePayroll(context.Context, *DeletePayrollRequest) (*DeletePayrollResponse, error)
	ListPayrolls(context.Context, *ListPayrollsRequest) (*ListPayrollsResponse, error)
	AddPayrollDetail(context.Context, *AddPayrollDetailRequest) (*AddPayrollDetailResponse, error)
	GetPayslip(context.Context, *GetPayslipRequest) (*GetPayslipResponse, error)
	CreateRequestLeave(context.Context, *RequestLeaveRequest) (*RequestLeaveResponse, error)
	GetLeave(context.Context, *GetLeaveRequest) (*GetLeaveResponse, error)
	ApproveLeave(context.Context, *ApproveLeaveRequest) (*ApproveLeaveResponse, error)
	ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error)
	GetLeaveBalance(context.Context, *GetLeaveBalanceRequest) (*GetLeaveBalanceResponse, error)
	GetStaffLeaveBalances(context.Context, *GetStaffLeaveBalancesRequest) (*GetStaffLeaveBalancesResponse, error)
	SetLeaveEntitlement(context.Context, *SetLeaveEntitlementRequest) (*SetLeaveEntitlementResponse, error)
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentResponse, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error)
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	RecordAttendance(context.Context, *RecordAttendanceRequest) (*RecordAttendanceResponse, error)
	GetAttendance(context.Context, *GetAttendanceRequest) (*GetAttendanceResponse, error)
	ListAttendance(context.Context, *ListAttendanceRequest) (*ListAttendanceResponse, error)
	GetAttendanceStatistics(context.Context, *GetAttendanceStatisticsRequest) (*GetAttendanceStatisticsResponse, error)
	// ------------------ Staff Benefits/Deductions Endpoints ------------------
	AddStaffBenefit(context.Context, *AddStaffBenefitRequest) (*AddStaffBenefitResponse, error)
	RemoveStaffBenefit(context.Context, *RemoveStaffBenefitRequest) (*RemoveStaffBenefitResponse, error)
	ListStaffBenefits(context.Context, *ListStaffBenefitsRequest) (*ListStaffBenefitsResponse, error)
	mustEmbedUnimplementedHRServiceServer()
}

// UnimplementedHRServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHRServiceServer struct{}

func (UnimplementedHRServiceServer) RegisterStaff(context.Context, *RegisterStaffRequest) (*RegisterStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStaff not implemented")
}
func (UnimplementedHRServiceServer) GetStaff(context.Context, *GetStaffRequest) (*GetStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedHRServiceServer) UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedHRServiceServer) DeleteStaff(context.Context, *DeleteStaffRequest) (*DeleteStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedHRServiceServer) ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedHRServiceServer) IsStaffAvailable(context.Context, *IsStaffAvailableRequest) (*IsStaffAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStaffAvailable not implemented")
}
func (UnimplementedHRServiceServer) CreatePayroll(context.Context, *CreatePayrollRequest) (*CreatePayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayroll not implemented")
}
func (UnimplementedHRServiceServer) GetPayroll(context.Context, *GetPayrollRequest) (*GetPayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayroll not implemented")
}
func (UnimplementedHRServiceServer) UpdatePayroll(context.Context, *UpdatePayrollRequest) (*UpdatePayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayroll not implemented")
}
func (UnimplementedHRServiceServer) DeletePayroll(context.Context, *DeletePayrollRequest) (*DeletePayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayroll not implemented")
}
func (UnimplementedHRServiceServer) ListPayrolls(context.Context, *ListPayrollsRequest) (*ListPayrollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayrolls not implemented")
}
func (UnimplementedHRServiceServer) AddPayrollDetail(context.Context, *AddPayrollDetailRequest) (*AddPayrollDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPayrollDetail not implemented")
}
func (UnimplementedHRServiceServer) GetPayslip(context.Context, *GetPayslipRequest) (*GetPayslipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayslip not implemented")
}
func (UnimplementedHRServiceServer) CreateRequestLeave(context.Context, *RequestLeaveRequest) (*RequestLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRequestLeave not implemented")
}
func (UnimplementedHRServiceServer) GetLeave(context.Context, *GetLeaveRequest) (*GetLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeave not implemented")
}
func (UnimplementedHRServiceServer) ApproveLeave(context.Context, *ApproveLeaveRequest) (*ApproveLeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLeave not implemented")
}
func (UnimplementedHRServiceServer) ListLeaveRequests(context.Context, *ListLeaveRequestsRequest) (*ListLeaveRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveRequests not implemented")
}
func (UnimplementedHRServiceServer) GetLeaveBalance(context.Context, *GetLeaveBalanceRequest) (*GetLeaveBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveBalance not implemented")
}
func (UnimplementedHRServiceServer) GetStaffLeaveBalances(context.Context, *GetStaffLeaveBalancesRequest) (*GetStaffLeaveBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffLeaveBalances not implemented")
}
func (UnimplementedHRServiceServer) SetLeaveEntitlement(context.Context, *SetLeaveEntitlementRequest) (*SetLeaveEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeaveEntitlement not implemented")
}
func (UnimplementedHRServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedHRServiceServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedHRServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedHRServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedHRServiceServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedHRServiceServer) RecordAttendance(context.Context, *RecordAttendanceRequest) (*RecordAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAttendance not implemented")
}
func (UnimplementedHRServiceServer) GetAttendance(context.Context, *GetAttendanceRequest) (*GetAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendance not implemented")
}
func (UnimplementedHRServiceServer) ListAttendance(context.Context, *ListAttendanceRequest) (*ListAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttendance not implemented")
}
func (UnimplementedHRServiceServer) GetAttendanceStatistics(context.Context, *GetAttendanceStatisticsRequest) (*GetAttendanceStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceStatistics not implemented")
}
func (UnimplementedHRServiceServer) AddStaffBenefit(context.Context, *AddStaffBenefitRequest) (*AddStaffBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStaffBenefit not implemented")
}
func (UnimplementedHRServiceServer) RemoveStaffBenefit(context.Context, *RemoveStaffBenefitRequest) (*RemoveStaffBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStaffBenefit not implemented")
}
func (UnimplementedHRServiceServer) ListStaffBenefits(context.Context, *ListStaffBenefitsRequest) (*ListStaffBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffBenefits not implemented")
}
func (UnimplementedHRServiceServer) mustEmbedUnimplementedHRServiceServer() {}
func (UnimplementedHRServiceServer) testEmbeddedByValue()                   {}

// UnsafeHRServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HRServiceServer will
// result in compilation errors.
type UnsafeHRServiceServer interface {
	mustEmbedUnimplementedHRServiceServer()
}

func RegisterHRServiceServer(s grpc.ServiceRegistrar, srv HRServiceServer) {
	// If the following call pancis, it indicates UnimplementedHRServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HRService_ServiceDesc, srv)
}

func _HRService_RegisterStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).RegisterStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_RegisterStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).RegisterStaff(ctx, req.(*RegisterStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetStaff(ctx, req.(*GetStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_UpdateStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).UpdateStaff(ctx, req.(*UpdateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_DeleteStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).DeleteStaff(ctx, req.(*DeleteStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListStaff(ctx, req.(*ListStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_IsStaffAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsStaffAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).IsStaffAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_IsStaffAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).IsStaffAvailable(ctx, req.(*IsStaffAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_CreatePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).CreatePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_CreatePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).CreatePayroll(ctx, req.(*CreatePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetPayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetPayroll(ctx, req.(*GetPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_UpdatePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).UpdatePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_UpdatePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).UpdatePayroll(ctx, req.(*UpdatePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_DeletePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).DeletePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_DeletePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).DeletePayroll(ctx, req.(*DeletePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListPayrolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayrollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListPayrolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListPayrolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListPayrolls(ctx, req.(*ListPayrollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_AddPayrollDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPayrollDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).AddPayrollDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_AddPayrollDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).AddPayrollDetail(ctx, req.(*AddPayrollDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetPayslip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayslipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetPayslip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetPayslip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetPayslip(ctx, req.(*GetPayslipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_CreateRequestLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).CreateRequestLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_CreateRequestLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).CreateRequestLeave(ctx, req.(*RequestLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetLeave(ctx, req.(*GetLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ApproveLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ApproveLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ApproveLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ApproveLeave(ctx, req.(*ApproveLeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListLeaveRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListLeaveRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListLeaveRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListLeaveRequests(ctx, req.(*ListLeaveRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetLeaveBalance(ctx, req.(*GetLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetStaffLeaveBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffLeaveBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetStaffLeaveBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetStaffLeaveBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetStaffLeaveBalances(ctx, req.(*GetStaffLeaveBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_SetLeaveEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeaveEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).SetLeaveEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_SetLeaveEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).SetLeaveEntitlement(ctx, req.(*SetLeaveEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_RecordAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).RecordAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_RecordAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).RecordAttendance(ctx, req.(*RecordAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetAttendance(ctx, req.(*GetAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListAttendance(ctx, req.(*ListAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_GetAttendanceStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).GetAttendanceStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_GetAttendanceStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).GetAttendanceStatistics(ctx, req.(*GetAttendanceStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_AddStaffBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStaffBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).AddStaffBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_AddStaffBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).AddStaffBenefit(ctx, req.(*AddStaffBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_RemoveStaffBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStaffBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).RemoveStaffBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_RemoveStaffBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).RemoveStaffBenefit(ctx, req.(*RemoveStaffBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HRService_ListStaffBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HRServiceServer).ListStaffBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HRService_ListStaffBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HRServiceServer).ListStaffBenefits(ctx, req.(*ListStaffBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HRService_ServiceDesc is the grpc.ServiceDesc for HRService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HRService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "human_resource_service.HRService",
	HandlerType: (*HRServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStaff",
			Handler:    _HRService_RegisterStaff_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _HRService_GetStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _HRService_UpdateStaff_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _HRService_DeleteStaff_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _HRService_ListStaff_Handler,
		},
		{
			MethodName: "IsStaffAvailable",
			Handler:    _HRService_IsStaffAvailable_Handler,
		},
		{
			MethodName: "CreatePayroll",
			Handler:    _HRService_CreatePayroll_Handler,
		},
		{
			MethodName: "GetPayroll",
			Handler:    _HRService_GetPayroll_Handler,
		},
		{
			MethodName: "UpdatePayroll",
			Handler:    _HRService_UpdatePayroll_Handler,
		},
		{
			MethodName: "DeletePayroll",
			Handler:    _HRService_DeletePayroll_Handler,
		},
		{
			MethodName: "ListPayrolls",
			Handler:    _HRService_ListPayrolls_Handler,
		},
		{
			MethodName: "AddPayrollDetail",
			Handler:    _HRService_AddPayrollDetail_Handler,
		},
		{
			MethodName: "GetPayslip",
			Handler:    _HRService_GetPayslip_Handler,
		},
		{
			MethodName: "CreateRequestLeave",
			Handler:    _HRService_CreateRequestLeave_Handler,
		},
		{
			MethodName: "GetLeave",
			Handler:    _HRService_GetLeave_Handler,
		},
		{
			MethodName: "ApproveLeave",
			Handler:    _HRService_ApproveLeave_Handler,
		},
		{
			MethodName: "ListLeaveRequests",
			Handler:    _HRService_ListLeaveRequests_Handler,
		},
		{
			MethodName: "GetLeaveBalance",
			Handler:    _HRService_GetLeaveBalance_Handler,
		},
		{
			MethodName: "GetStaffLeaveBalances",
			Handler:    _HRService_GetStaffLeaveBalances_Handler,
		},
		{
			MethodName: "SetLeaveEntitlement",
			Handler:    _HRService_SetLeaveEntitlement_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _HRService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _HRService_GetDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _HRService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _HRService_DeleteDepartment_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _HRService_ListDepartments_Handler,
		},
		{
			MethodName: "RecordAttendance",
			Handler:    _HRService_RecordAttendance_Handler,
		},
		{
			MethodName: "GetAttendance",
			Handler:    _HRService_GetAttendance_Handler,
		},
		{
			MethodName: "ListAttendance",
			Handler:    _HRService_ListAttendance_Handler,
		},
		{
			MethodName: "GetAttendanceStatistics",
			Handler:    _HRService_GetAttendanceStatistics_Handler,
		},
		{
			MethodName: "AddStaffBenefit",
			Handler:    _HRService_AddStaffBenefit_Handler,
		},
		{
			MethodName: "RemoveStaffBenefit",
			Handler:    _HRService_RemoveStaffBenefit_Handler,
		},
		{
			MethodName: "ListStaffBenefits",
			Handler:    _HRService_ListStaffBenefits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "human_resource_service.proto",
}
