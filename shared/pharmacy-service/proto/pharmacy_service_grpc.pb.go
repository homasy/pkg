// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: pharmacy_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PharmacyService_CreateMedication_FullMethodName             = "/pharmacy_service.PharmacyService/CreateMedication"
	PharmacyService_GetMedication_FullMethodName                = "/pharmacy_service.PharmacyService/GetMedication"
	PharmacyService_UpdateMedication_FullMethodName             = "/pharmacy_service.PharmacyService/UpdateMedication"
	PharmacyService_DeleteMedication_FullMethodName             = "/pharmacy_service.PharmacyService/DeleteMedication"
	PharmacyService_ListMedications_FullMethodName              = "/pharmacy_service.PharmacyService/ListMedications"
	PharmacyService_GetMedicationWithCategory_FullMethodName    = "/pharmacy_service.PharmacyService/GetMedicationWithCategory"
	PharmacyService_CreateMedicationCategory_FullMethodName     = "/pharmacy_service.PharmacyService/CreateMedicationCategory"
	PharmacyService_ListMedicationCategories_FullMethodName     = "/pharmacy_service.PharmacyService/ListMedicationCategories"
	PharmacyService_GetSingleCategory_FullMethodName            = "/pharmacy_service.PharmacyService/GetSingleCategory"
	PharmacyService_CreatePrescriptionRequest_FullMethodName    = "/pharmacy_service.PharmacyService/CreatePrescriptionRequest"
	PharmacyService_UpdatePrescriptionRequest_FullMethodName    = "/pharmacy_service.PharmacyService/UpdatePrescriptionRequest"
	PharmacyService_GetSinglePrescriptionRequest_FullMethodName = "/pharmacy_service.PharmacyService/GetSinglePrescriptionRequest"
	PharmacyService_ListPrescriptionRequests_FullMethodName     = "/pharmacy_service.PharmacyService/ListPrescriptionRequests"
	PharmacyService_CreatePrescriptionItem_FullMethodName       = "/pharmacy_service.PharmacyService/CreatePrescriptionItem"
	PharmacyService_GetPrescriptionItem_FullMethodName          = "/pharmacy_service.PharmacyService/GetPrescriptionItem"
	PharmacyService_ListPrescriptionItems_FullMethodName        = "/pharmacy_service.PharmacyService/ListPrescriptionItems"
	PharmacyService_UpdatePrescriptionItem_FullMethodName       = "/pharmacy_service.PharmacyService/UpdatePrescriptionItem"
	PharmacyService_DeletePrescriptionItem_FullMethodName       = "/pharmacy_service.PharmacyService/DeletePrescriptionItem"
	PharmacyService_CreateStore_FullMethodName                  = "/pharmacy_service.PharmacyService/CreateStore"
	PharmacyService_GetStore_FullMethodName                     = "/pharmacy_service.PharmacyService/GetStore"
	PharmacyService_ListStores_FullMethodName                   = "/pharmacy_service.PharmacyService/ListStores"
	PharmacyService_UpdateStore_FullMethodName                  = "/pharmacy_service.PharmacyService/UpdateStore"
	PharmacyService_DeleteStore_FullMethodName                  = "/pharmacy_service.PharmacyService/DeleteStore"
	PharmacyService_CreateStockRequest_FullMethodName           = "/pharmacy_service.PharmacyService/CreateStockRequest"
	PharmacyService_GetStockRequest_FullMethodName              = "/pharmacy_service.PharmacyService/GetStockRequest"
	PharmacyService_ListStockRequests_FullMethodName            = "/pharmacy_service.PharmacyService/ListStockRequests"
	PharmacyService_ApproveStockRequest_FullMethodName          = "/pharmacy_service.PharmacyService/ApproveStockRequest"
	PharmacyService_DeleteStockRequest_FullMethodName           = "/pharmacy_service.PharmacyService/DeleteStockRequest"
	PharmacyService_CreateStockRequestItem_FullMethodName       = "/pharmacy_service.PharmacyService/CreateStockRequestItem"
	PharmacyService_GetStockRequestItem_FullMethodName          = "/pharmacy_service.PharmacyService/GetStockRequestItem"
	PharmacyService_ListStockRequestItems_FullMethodName        = "/pharmacy_service.PharmacyService/ListStockRequestItems"
	PharmacyService_UpdateStockRequestItem_FullMethodName       = "/pharmacy_service.PharmacyService/UpdateStockRequestItem"
	PharmacyService_DeleteStockRequestItem_FullMethodName       = "/pharmacy_service.PharmacyService/DeleteStockRequestItem"
	PharmacyService_CreateDispensedMedication_FullMethodName    = "/pharmacy_service.PharmacyService/CreateDispensedMedication"
	PharmacyService_GetDispensedMedication_FullMethodName       = "/pharmacy_service.PharmacyService/GetDispensedMedication"
	PharmacyService_ListDispensedMedications_FullMethodName     = "/pharmacy_service.PharmacyService/ListDispensedMedications"
	PharmacyService_UpdateDispensedMedication_FullMethodName    = "/pharmacy_service.PharmacyService/UpdateDispensedMedication"
	PharmacyService_DeleteDispensedMedication_FullMethodName    = "/pharmacy_service.PharmacyService/DeleteDispensedMedication"
	PharmacyService_CreateMedicationReturn_FullMethodName       = "/pharmacy_service.PharmacyService/CreateMedicationReturn"
	PharmacyService_GetMedicationReturn_FullMethodName          = "/pharmacy_service.PharmacyService/GetMedicationReturn"
	PharmacyService_ListMedicationReturns_FullMethodName        = "/pharmacy_service.PharmacyService/ListMedicationReturns"
	PharmacyService_CreateStockMovement_FullMethodName          = "/pharmacy_service.PharmacyService/CreateStockMovement"
	PharmacyService_GetStockMovement_FullMethodName             = "/pharmacy_service.PharmacyService/GetStockMovement"
	PharmacyService_ListStockMovements_FullMethodName           = "/pharmacy_service.PharmacyService/ListStockMovements"
	PharmacyService_UpdateStockMovement_FullMethodName          = "/pharmacy_service.PharmacyService/UpdateStockMovement"
	PharmacyService_DeleteStockMovement_FullMethodName          = "/pharmacy_service.PharmacyService/DeleteStockMovement"
	PharmacyService_CreateMedicationSchedule_FullMethodName     = "/pharmacy_service.PharmacyService/CreateMedicationSchedule"
	PharmacyService_GetMedicationSchedule_FullMethodName        = "/pharmacy_service.PharmacyService/GetMedicationSchedule"
	PharmacyService_ListMedicationSchedules_FullMethodName      = "/pharmacy_service.PharmacyService/ListMedicationSchedules"
	PharmacyService_UpdateMedicationSchedule_FullMethodName     = "/pharmacy_service.PharmacyService/UpdateMedicationSchedule"
	PharmacyService_DeleteMedicationSchedule_FullMethodName     = "/pharmacy_service.PharmacyService/DeleteMedicationSchedule"
	PharmacyService_RecordMedicationIntake_FullMethodName       = "/pharmacy_service.PharmacyService/RecordMedicationIntake"
	PharmacyService_GetMedicationIntake_FullMethodName          = "/pharmacy_service.PharmacyService/GetMedicationIntake"
	PharmacyService_ListMedicationIntakes_FullMethodName        = "/pharmacy_service.PharmacyService/ListMedicationIntakes"
	PharmacyService_GetPatientAdherenceRate_FullMethodName      = "/pharmacy_service.PharmacyService/GetPatientAdherenceRate"
	PharmacyService_GetMedicationAdherenceRate_FullMethodName   = "/pharmacy_service.PharmacyService/GetMedicationAdherenceRate"
	PharmacyService_GetTimeSlotMedications_FullMethodName       = "/pharmacy_service.PharmacyService/GetTimeSlotMedications"
)

// PharmacyServiceClient is the client API for PharmacyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PharmacyService defines the service for managing prescriptions, medications, and categories
type PharmacyServiceClient interface {
	// Medication Endpoints
	CreateMedication(ctx context.Context, in *CreateMedicationRequest, opts ...grpc.CallOption) (*CreateMedicationResponse, error)
	GetMedication(ctx context.Context, in *GetMedicationRequest, opts ...grpc.CallOption) (*GetMedicationResponse, error)
	UpdateMedication(ctx context.Context, in *UpdateMedicationRequest, opts ...grpc.CallOption) (*UpdateMedicationResponse, error)
	DeleteMedication(ctx context.Context, in *DeleteMedicationRequest, opts ...grpc.CallOption) (*DeleteMedicationResponse, error)
	ListMedications(ctx context.Context, in *ListMedicationsRequest, opts ...grpc.CallOption) (*ListMedicationsResponse, error)
	GetMedicationWithCategory(ctx context.Context, in *GetMedicationWithCategoryRequest, opts ...grpc.CallOption) (*GetMedicationWithCategoryResponse, error)
	// Medication Category Endpoints
	CreateMedicationCategory(ctx context.Context, in *CreateMedicationCategoryRequest, opts ...grpc.CallOption) (*CreateMedicationCategoryResponse, error)
	ListMedicationCategories(ctx context.Context, in *ListMedicationCategoriesRequest, opts ...grpc.CallOption) (*ListMedicationCategoriesResponse, error)
	GetSingleCategory(ctx context.Context, in *GetSingleCategoryRequest, opts ...grpc.CallOption) (*GetSingleCategoryResponse, error)
	CreatePrescriptionRequest(ctx context.Context, in *CreatePrescriptionRequestRequest, opts ...grpc.CallOption) (*CreatePrescriptionRequestResponse, error)
	UpdatePrescriptionRequest(ctx context.Context, in *UpdatePrescriptionRequestsRequests, opts ...grpc.CallOption) (*UpdatePrescriptionRequestsResponse, error)
	GetSinglePrescriptionRequest(ctx context.Context, in *GetSinglePrescriptionRequestRequest, opts ...grpc.CallOption) (*GetSinglePrescriptionRequestResponse, error)
	ListPrescriptionRequests(ctx context.Context, in *ListPrescriptionRequestsRequests, opts ...grpc.CallOption) (*ListPrescriptionRequestsResponse, error)
	// prescription items Endpoints
	CreatePrescriptionItem(ctx context.Context, in *CreatePrescriptionItemRequest, opts ...grpc.CallOption) (*CreatePrescriptionItemResponse, error)
	GetPrescriptionItem(ctx context.Context, in *GetPrescriptionItemRequest, opts ...grpc.CallOption) (*GetPrescriptionItemResponse, error)
	ListPrescriptionItems(ctx context.Context, in *ListPrescriptionItemsRequest, opts ...grpc.CallOption) (*ListPrescriptionItemsResponse, error)
	UpdatePrescriptionItem(ctx context.Context, in *UpdatePrescriptionItemRequest, opts ...grpc.CallOption) (*UpdatePrescriptionItemResponse, error)
	DeletePrescriptionItem(ctx context.Context, in *DeletePrescriptionItemRequest, opts ...grpc.CallOption) (*DeletePrescriptionItemResponse, error)
	// stores
	CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error)
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error)
	DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error)
	// stock requests
	CreateStockRequest(ctx context.Context, in *CreateStockRequestRequest, opts ...grpc.CallOption) (*CreateStockRequestResponse, error)
	GetStockRequest(ctx context.Context, in *GetStockRequestRequest, opts ...grpc.CallOption) (*GetStockRequestResponse, error)
	ListStockRequests(ctx context.Context, in *ListStockRequestsRequest, opts ...grpc.CallOption) (*ListStockRequestsResponse, error)
	ApproveStockRequest(ctx context.Context, in *ApproveStockRequestRequest, opts ...grpc.CallOption) (*ApproveStockRequestResponse, error)
	DeleteStockRequest(ctx context.Context, in *DeleteStockRequestRequest, opts ...grpc.CallOption) (*DeleteStockRequestResponse, error)
	// request items Endpoints
	CreateStockRequestItem(ctx context.Context, in *CreateStockRequestItemRequest, opts ...grpc.CallOption) (*CreateStockRequestItemResponse, error)
	GetStockRequestItem(ctx context.Context, in *GetStockRequestItemRequest, opts ...grpc.CallOption) (*GetStockRequestItemResponse, error)
	ListStockRequestItems(ctx context.Context, in *ListStockRequestItemsRequest, opts ...grpc.CallOption) (*ListStockRequestItemsResponse, error)
	UpdateStockRequestItem(ctx context.Context, in *UpdateStockRequestItemRequest, opts ...grpc.CallOption) (*UpdateStockRequestItemResponse, error)
	DeleteStockRequestItem(ctx context.Context, in *DeleteStockRequestItemRequest, opts ...grpc.CallOption) (*DeleteStockRequestItemResponse, error)
	// dispense service
	// Create a new dispensed medication record
	CreateDispensedMedication(ctx context.Context, in *CreateDispensedMedicationRequest, opts ...grpc.CallOption) (*CreateDispensedMedicationResponse, error)
	// Get a specific dispensed medication record
	GetDispensedMedication(ctx context.Context, in *GetDispensedMedicationRequest, opts ...grpc.CallOption) (*GetDispensedMedicationResponse, error)
	// List all dispensed medication records
	ListDispensedMedications(ctx context.Context, in *ListDispensedMedicationsRequest, opts ...grpc.CallOption) (*ListDispensedMedicationsResponse, error)
	// Update a dispensed medication record
	UpdateDispensedMedication(ctx context.Context, in *UpdateDispensedMedicationRequest, opts ...grpc.CallOption) (*UpdateDispensedMedicationResponse, error)
	// Delete a dispensed medication record
	DeleteDispensedMedication(ctx context.Context, in *DeleteDispensedMedicationRequest, opts ...grpc.CallOption) (*DeleteDispensedMedicationResponse, error)
	// medication returns  Endpoints
	CreateMedicationReturn(ctx context.Context, in *CreateMedicationReturnRequest, opts ...grpc.CallOption) (*CreateMedicationReturnResponse, error)
	GetMedicationReturn(ctx context.Context, in *GetMedicationReturnRequest, opts ...grpc.CallOption) (*GetMedicationReturnResponse, error)
	ListMedicationReturns(ctx context.Context, in *ListMedicationReturnsRequest, opts ...grpc.CallOption) (*ListMedicationReturnsResponse, error)
	// stock movements Endpoints
	CreateStockMovement(ctx context.Context, in *CreateStockMovementRequest, opts ...grpc.CallOption) (*CreateStockMovementResponse, error)
	GetStockMovement(ctx context.Context, in *GetStockMovementRequest, opts ...grpc.CallOption) (*GetStockMovementResponse, error)
	ListStockMovements(ctx context.Context, in *ListStockMovementsRequest, opts ...grpc.CallOption) (*ListStockMovementsResponse, error)
	UpdateStockMovement(ctx context.Context, in *UpdateStockMovementRequest, opts ...grpc.CallOption) (*UpdateStockMovementResponse, error)
	DeleteStockMovement(ctx context.Context, in *DeleteStockMovementRequest, opts ...grpc.CallOption) (*DeleteStockMovementResponse, error)
	// Medication Schedule endpoints
	CreateMedicationSchedule(ctx context.Context, in *CreateMedicationScheduleRequest, opts ...grpc.CallOption) (*CreateMedicationScheduleResponse, error)
	GetMedicationSchedule(ctx context.Context, in *GetMedicationScheduleRequest, opts ...grpc.CallOption) (*GetMedicationScheduleResponse, error)
	ListMedicationSchedules(ctx context.Context, in *ListMedicationSchedulesRequest, opts ...grpc.CallOption) (*ListMedicationSchedulesResponse, error)
	UpdateMedicationSchedule(ctx context.Context, in *UpdateMedicationScheduleRequest, opts ...grpc.CallOption) (*UpdateMedicationScheduleResponse, error)
	DeleteMedicationSchedule(ctx context.Context, in *DeleteMedicationScheduleRequest, opts ...grpc.CallOption) (*DeleteMedicationScheduleResponse, error)
	// Medication Intake endpoints
	RecordMedicationIntake(ctx context.Context, in *RecordMedicationIntakeRequest, opts ...grpc.CallOption) (*RecordMedicationIntakeResponse, error)
	GetMedicationIntake(ctx context.Context, in *GetMedicationIntakeRequest, opts ...grpc.CallOption) (*GetMedicationIntakeResponse, error)
	ListMedicationIntakes(ctx context.Context, in *ListMedicationIntakesRequest, opts ...grpc.CallOption) (*ListMedicationIntakesResponse, error)
	GetPatientAdherenceRate(ctx context.Context, in *GetPatientAdherenceRateRequest, opts ...grpc.CallOption) (*GetPatientAdherenceRateResponse, error)
	GetMedicationAdherenceRate(ctx context.Context, in *GetMedicationAdherenceRateRequest, opts ...grpc.CallOption) (*GetMedicationAdherenceRateResponse, error)
	GetTimeSlotMedications(ctx context.Context, in *GetTimeSlotMedicationsRequest, opts ...grpc.CallOption) (*GetTimeSlotMedicationsResponse, error)
}

type pharmacyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmacyServiceClient(cc grpc.ClientConnInterface) PharmacyServiceClient {
	return &pharmacyServiceClient{cc}
}

func (c *pharmacyServiceClient) CreateMedication(ctx context.Context, in *CreateMedicationRequest, opts ...grpc.CallOption) (*CreateMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedication(ctx context.Context, in *GetMedicationRequest, opts ...grpc.CallOption) (*GetMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateMedication(ctx context.Context, in *UpdateMedicationRequest, opts ...grpc.CallOption) (*UpdateMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteMedication(ctx context.Context, in *DeleteMedicationRequest, opts ...grpc.CallOption) (*DeleteMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListMedications(ctx context.Context, in *ListMedicationsRequest, opts ...grpc.CallOption) (*ListMedicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListMedications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedicationWithCategory(ctx context.Context, in *GetMedicationWithCategoryRequest, opts ...grpc.CallOption) (*GetMedicationWithCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationWithCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedicationWithCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateMedicationCategory(ctx context.Context, in *CreateMedicationCategoryRequest, opts ...grpc.CallOption) (*CreateMedicationCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicationCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateMedicationCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListMedicationCategories(ctx context.Context, in *ListMedicationCategoriesRequest, opts ...grpc.CallOption) (*ListMedicationCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationCategoriesResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListMedicationCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetSingleCategory(ctx context.Context, in *GetSingleCategoryRequest, opts ...grpc.CallOption) (*GetSingleCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSingleCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetSingleCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreatePrescriptionRequest(ctx context.Context, in *CreatePrescriptionRequestRequest, opts ...grpc.CallOption) (*CreatePrescriptionRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrescriptionRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreatePrescriptionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdatePrescriptionRequest(ctx context.Context, in *UpdatePrescriptionRequestsRequests, opts ...grpc.CallOption) (*UpdatePrescriptionRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrescriptionRequestsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdatePrescriptionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetSinglePrescriptionRequest(ctx context.Context, in *GetSinglePrescriptionRequestRequest, opts ...grpc.CallOption) (*GetSinglePrescriptionRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSinglePrescriptionRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetSinglePrescriptionRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListPrescriptionRequests(ctx context.Context, in *ListPrescriptionRequestsRequests, opts ...grpc.CallOption) (*ListPrescriptionRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionRequestsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListPrescriptionRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreatePrescriptionItem(ctx context.Context, in *CreatePrescriptionItemRequest, opts ...grpc.CallOption) (*CreatePrescriptionItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrescriptionItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreatePrescriptionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetPrescriptionItem(ctx context.Context, in *GetPrescriptionItemRequest, opts ...grpc.CallOption) (*GetPrescriptionItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetPrescriptionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListPrescriptionItems(ctx context.Context, in *ListPrescriptionItemsRequest, opts ...grpc.CallOption) (*ListPrescriptionItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionItemsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListPrescriptionItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdatePrescriptionItem(ctx context.Context, in *UpdatePrescriptionItemRequest, opts ...grpc.CallOption) (*UpdatePrescriptionItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrescriptionItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdatePrescriptionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeletePrescriptionItem(ctx context.Context, in *DeletePrescriptionItemRequest, opts ...grpc.CallOption) (*DeletePrescriptionItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrescriptionItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeletePrescriptionItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateStore(ctx context.Context, in *CreateStoreRequest, opts ...grpc.CallOption) (*CreateStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStoreResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoreResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteStore(ctx context.Context, in *DeleteStoreRequest, opts ...grpc.CallOption) (*DeleteStoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoreResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateStockRequest(ctx context.Context, in *CreateStockRequestRequest, opts ...grpc.CallOption) (*CreateStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetStockRequest(ctx context.Context, in *GetStockRequestRequest, opts ...grpc.CallOption) (*GetStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListStockRequests(ctx context.Context, in *ListStockRequestsRequest, opts ...grpc.CallOption) (*ListStockRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockRequestsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListStockRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ApproveStockRequest(ctx context.Context, in *ApproveStockRequestRequest, opts ...grpc.CallOption) (*ApproveStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveStockRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ApproveStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteStockRequest(ctx context.Context, in *DeleteStockRequestRequest, opts ...grpc.CallOption) (*DeleteStockRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStockRequestResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteStockRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateStockRequestItem(ctx context.Context, in *CreateStockRequestItemRequest, opts ...grpc.CallOption) (*CreateStockRequestItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockRequestItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateStockRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetStockRequestItem(ctx context.Context, in *GetStockRequestItemRequest, opts ...grpc.CallOption) (*GetStockRequestItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockRequestItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetStockRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListStockRequestItems(ctx context.Context, in *ListStockRequestItemsRequest, opts ...grpc.CallOption) (*ListStockRequestItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockRequestItemsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListStockRequestItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateStockRequestItem(ctx context.Context, in *UpdateStockRequestItemRequest, opts ...grpc.CallOption) (*UpdateStockRequestItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockRequestItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateStockRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteStockRequestItem(ctx context.Context, in *DeleteStockRequestItemRequest, opts ...grpc.CallOption) (*DeleteStockRequestItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStockRequestItemResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteStockRequestItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateDispensedMedication(ctx context.Context, in *CreateDispensedMedicationRequest, opts ...grpc.CallOption) (*CreateDispensedMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDispensedMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateDispensedMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetDispensedMedication(ctx context.Context, in *GetDispensedMedicationRequest, opts ...grpc.CallOption) (*GetDispensedMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDispensedMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetDispensedMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListDispensedMedications(ctx context.Context, in *ListDispensedMedicationsRequest, opts ...grpc.CallOption) (*ListDispensedMedicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDispensedMedicationsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListDispensedMedications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateDispensedMedication(ctx context.Context, in *UpdateDispensedMedicationRequest, opts ...grpc.CallOption) (*UpdateDispensedMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDispensedMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateDispensedMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteDispensedMedication(ctx context.Context, in *DeleteDispensedMedicationRequest, opts ...grpc.CallOption) (*DeleteDispensedMedicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDispensedMedicationResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteDispensedMedication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateMedicationReturn(ctx context.Context, in *CreateMedicationReturnRequest, opts ...grpc.CallOption) (*CreateMedicationReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicationReturnResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateMedicationReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedicationReturn(ctx context.Context, in *GetMedicationReturnRequest, opts ...grpc.CallOption) (*GetMedicationReturnResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationReturnResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedicationReturn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListMedicationReturns(ctx context.Context, in *ListMedicationReturnsRequest, opts ...grpc.CallOption) (*ListMedicationReturnsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationReturnsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListMedicationReturns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateStockMovement(ctx context.Context, in *CreateStockMovementRequest, opts ...grpc.CallOption) (*CreateStockMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStockMovementResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateStockMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetStockMovement(ctx context.Context, in *GetStockMovementRequest, opts ...grpc.CallOption) (*GetStockMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStockMovementResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetStockMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListStockMovements(ctx context.Context, in *ListStockMovementsRequest, opts ...grpc.CallOption) (*ListStockMovementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStockMovementsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListStockMovements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateStockMovement(ctx context.Context, in *UpdateStockMovementRequest, opts ...grpc.CallOption) (*UpdateStockMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStockMovementResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateStockMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteStockMovement(ctx context.Context, in *DeleteStockMovementRequest, opts ...grpc.CallOption) (*DeleteStockMovementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStockMovementResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteStockMovement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) CreateMedicationSchedule(ctx context.Context, in *CreateMedicationScheduleRequest, opts ...grpc.CallOption) (*CreateMedicationScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicationScheduleResponse)
	err := c.cc.Invoke(ctx, PharmacyService_CreateMedicationSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedicationSchedule(ctx context.Context, in *GetMedicationScheduleRequest, opts ...grpc.CallOption) (*GetMedicationScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationScheduleResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedicationSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListMedicationSchedules(ctx context.Context, in *ListMedicationSchedulesRequest, opts ...grpc.CallOption) (*ListMedicationSchedulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationSchedulesResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListMedicationSchedules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) UpdateMedicationSchedule(ctx context.Context, in *UpdateMedicationScheduleRequest, opts ...grpc.CallOption) (*UpdateMedicationScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedicationScheduleResponse)
	err := c.cc.Invoke(ctx, PharmacyService_UpdateMedicationSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) DeleteMedicationSchedule(ctx context.Context, in *DeleteMedicationScheduleRequest, opts ...grpc.CallOption) (*DeleteMedicationScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMedicationScheduleResponse)
	err := c.cc.Invoke(ctx, PharmacyService_DeleteMedicationSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) RecordMedicationIntake(ctx context.Context, in *RecordMedicationIntakeRequest, opts ...grpc.CallOption) (*RecordMedicationIntakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordMedicationIntakeResponse)
	err := c.cc.Invoke(ctx, PharmacyService_RecordMedicationIntake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedicationIntake(ctx context.Context, in *GetMedicationIntakeRequest, opts ...grpc.CallOption) (*GetMedicationIntakeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationIntakeResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedicationIntake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) ListMedicationIntakes(ctx context.Context, in *ListMedicationIntakesRequest, opts ...grpc.CallOption) (*ListMedicationIntakesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicationIntakesResponse)
	err := c.cc.Invoke(ctx, PharmacyService_ListMedicationIntakes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetPatientAdherenceRate(ctx context.Context, in *GetPatientAdherenceRateRequest, opts ...grpc.CallOption) (*GetPatientAdherenceRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientAdherenceRateResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetPatientAdherenceRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetMedicationAdherenceRate(ctx context.Context, in *GetMedicationAdherenceRateRequest, opts ...grpc.CallOption) (*GetMedicationAdherenceRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicationAdherenceRateResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetMedicationAdherenceRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacyServiceClient) GetTimeSlotMedications(ctx context.Context, in *GetTimeSlotMedicationsRequest, opts ...grpc.CallOption) (*GetTimeSlotMedicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimeSlotMedicationsResponse)
	err := c.cc.Invoke(ctx, PharmacyService_GetTimeSlotMedications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmacyServiceServer is the server API for PharmacyService service.
// All implementations must embed UnimplementedPharmacyServiceServer
// for forward compatibility.
//
// PharmacyService defines the service for managing prescriptions, medications, and categories
type PharmacyServiceServer interface {
	// Medication Endpoints
	CreateMedication(context.Context, *CreateMedicationRequest) (*CreateMedicationResponse, error)
	GetMedication(context.Context, *GetMedicationRequest) (*GetMedicationResponse, error)
	UpdateMedication(context.Context, *UpdateMedicationRequest) (*UpdateMedicationResponse, error)
	DeleteMedication(context.Context, *DeleteMedicationRequest) (*DeleteMedicationResponse, error)
	ListMedications(context.Context, *ListMedicationsRequest) (*ListMedicationsResponse, error)
	GetMedicationWithCategory(context.Context, *GetMedicationWithCategoryRequest) (*GetMedicationWithCategoryResponse, error)
	// Medication Category Endpoints
	CreateMedicationCategory(context.Context, *CreateMedicationCategoryRequest) (*CreateMedicationCategoryResponse, error)
	ListMedicationCategories(context.Context, *ListMedicationCategoriesRequest) (*ListMedicationCategoriesResponse, error)
	GetSingleCategory(context.Context, *GetSingleCategoryRequest) (*GetSingleCategoryResponse, error)
	CreatePrescriptionRequest(context.Context, *CreatePrescriptionRequestRequest) (*CreatePrescriptionRequestResponse, error)
	UpdatePrescriptionRequest(context.Context, *UpdatePrescriptionRequestsRequests) (*UpdatePrescriptionRequestsResponse, error)
	GetSinglePrescriptionRequest(context.Context, *GetSinglePrescriptionRequestRequest) (*GetSinglePrescriptionRequestResponse, error)
	ListPrescriptionRequests(context.Context, *ListPrescriptionRequestsRequests) (*ListPrescriptionRequestsResponse, error)
	// prescription items Endpoints
	CreatePrescriptionItem(context.Context, *CreatePrescriptionItemRequest) (*CreatePrescriptionItemResponse, error)
	GetPrescriptionItem(context.Context, *GetPrescriptionItemRequest) (*GetPrescriptionItemResponse, error)
	ListPrescriptionItems(context.Context, *ListPrescriptionItemsRequest) (*ListPrescriptionItemsResponse, error)
	UpdatePrescriptionItem(context.Context, *UpdatePrescriptionItemRequest) (*UpdatePrescriptionItemResponse, error)
	DeletePrescriptionItem(context.Context, *DeletePrescriptionItemRequest) (*DeletePrescriptionItemResponse, error)
	// stores
	CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error)
	GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error)
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error)
	DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error)
	// stock requests
	CreateStockRequest(context.Context, *CreateStockRequestRequest) (*CreateStockRequestResponse, error)
	GetStockRequest(context.Context, *GetStockRequestRequest) (*GetStockRequestResponse, error)
	ListStockRequests(context.Context, *ListStockRequestsRequest) (*ListStockRequestsResponse, error)
	ApproveStockRequest(context.Context, *ApproveStockRequestRequest) (*ApproveStockRequestResponse, error)
	DeleteStockRequest(context.Context, *DeleteStockRequestRequest) (*DeleteStockRequestResponse, error)
	// request items Endpoints
	CreateStockRequestItem(context.Context, *CreateStockRequestItemRequest) (*CreateStockRequestItemResponse, error)
	GetStockRequestItem(context.Context, *GetStockRequestItemRequest) (*GetStockRequestItemResponse, error)
	ListStockRequestItems(context.Context, *ListStockRequestItemsRequest) (*ListStockRequestItemsResponse, error)
	UpdateStockRequestItem(context.Context, *UpdateStockRequestItemRequest) (*UpdateStockRequestItemResponse, error)
	DeleteStockRequestItem(context.Context, *DeleteStockRequestItemRequest) (*DeleteStockRequestItemResponse, error)
	// dispense service
	// Create a new dispensed medication record
	CreateDispensedMedication(context.Context, *CreateDispensedMedicationRequest) (*CreateDispensedMedicationResponse, error)
	// Get a specific dispensed medication record
	GetDispensedMedication(context.Context, *GetDispensedMedicationRequest) (*GetDispensedMedicationResponse, error)
	// List all dispensed medication records
	ListDispensedMedications(context.Context, *ListDispensedMedicationsRequest) (*ListDispensedMedicationsResponse, error)
	// Update a dispensed medication record
	UpdateDispensedMedication(context.Context, *UpdateDispensedMedicationRequest) (*UpdateDispensedMedicationResponse, error)
	// Delete a dispensed medication record
	DeleteDispensedMedication(context.Context, *DeleteDispensedMedicationRequest) (*DeleteDispensedMedicationResponse, error)
	// medication returns  Endpoints
	CreateMedicationReturn(context.Context, *CreateMedicationReturnRequest) (*CreateMedicationReturnResponse, error)
	GetMedicationReturn(context.Context, *GetMedicationReturnRequest) (*GetMedicationReturnResponse, error)
	ListMedicationReturns(context.Context, *ListMedicationReturnsRequest) (*ListMedicationReturnsResponse, error)
	// stock movements Endpoints
	CreateStockMovement(context.Context, *CreateStockMovementRequest) (*CreateStockMovementResponse, error)
	GetStockMovement(context.Context, *GetStockMovementRequest) (*GetStockMovementResponse, error)
	ListStockMovements(context.Context, *ListStockMovementsRequest) (*ListStockMovementsResponse, error)
	UpdateStockMovement(context.Context, *UpdateStockMovementRequest) (*UpdateStockMovementResponse, error)
	DeleteStockMovement(context.Context, *DeleteStockMovementRequest) (*DeleteStockMovementResponse, error)
	// Medication Schedule endpoints
	CreateMedicationSchedule(context.Context, *CreateMedicationScheduleRequest) (*CreateMedicationScheduleResponse, error)
	GetMedicationSchedule(context.Context, *GetMedicationScheduleRequest) (*GetMedicationScheduleResponse, error)
	ListMedicationSchedules(context.Context, *ListMedicationSchedulesRequest) (*ListMedicationSchedulesResponse, error)
	UpdateMedicationSchedule(context.Context, *UpdateMedicationScheduleRequest) (*UpdateMedicationScheduleResponse, error)
	DeleteMedicationSchedule(context.Context, *DeleteMedicationScheduleRequest) (*DeleteMedicationScheduleResponse, error)
	// Medication Intake endpoints
	RecordMedicationIntake(context.Context, *RecordMedicationIntakeRequest) (*RecordMedicationIntakeResponse, error)
	GetMedicationIntake(context.Context, *GetMedicationIntakeRequest) (*GetMedicationIntakeResponse, error)
	ListMedicationIntakes(context.Context, *ListMedicationIntakesRequest) (*ListMedicationIntakesResponse, error)
	GetPatientAdherenceRate(context.Context, *GetPatientAdherenceRateRequest) (*GetPatientAdherenceRateResponse, error)
	GetMedicationAdherenceRate(context.Context, *GetMedicationAdherenceRateRequest) (*GetMedicationAdherenceRateResponse, error)
	GetTimeSlotMedications(context.Context, *GetTimeSlotMedicationsRequest) (*GetTimeSlotMedicationsResponse, error)
	mustEmbedUnimplementedPharmacyServiceServer()
}

// UnimplementedPharmacyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPharmacyServiceServer struct{}

func (UnimplementedPharmacyServiceServer) CreateMedication(context.Context, *CreateMedicationRequest) (*CreateMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedication(context.Context, *GetMedicationRequest) (*GetMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateMedication(context.Context, *UpdateMedicationRequest) (*UpdateMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteMedication(context.Context, *DeleteMedicationRequest) (*DeleteMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) ListMedications(context.Context, *ListMedicationsRequest) (*ListMedicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedications not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedicationWithCategory(context.Context, *GetMedicationWithCategoryRequest) (*GetMedicationWithCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicationWithCategory not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateMedicationCategory(context.Context, *CreateMedicationCategoryRequest) (*CreateMedicationCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicationCategory not implemented")
}
func (UnimplementedPharmacyServiceServer) ListMedicationCategories(context.Context, *ListMedicationCategoriesRequest) (*ListMedicationCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicationCategories not implemented")
}
func (UnimplementedPharmacyServiceServer) GetSingleCategory(context.Context, *GetSingleCategoryRequest) (*GetSingleCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleCategory not implemented")
}
func (UnimplementedPharmacyServiceServer) CreatePrescriptionRequest(context.Context, *CreatePrescriptionRequestRequest) (*CreatePrescriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescriptionRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdatePrescriptionRequest(context.Context, *UpdatePrescriptionRequestsRequests) (*UpdatePrescriptionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescriptionRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) GetSinglePrescriptionRequest(context.Context, *GetSinglePrescriptionRequestRequest) (*GetSinglePrescriptionRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSinglePrescriptionRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) ListPrescriptionRequests(context.Context, *ListPrescriptionRequestsRequests) (*ListPrescriptionRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptionRequests not implemented")
}
func (UnimplementedPharmacyServiceServer) CreatePrescriptionItem(context.Context, *CreatePrescriptionItemRequest) (*CreatePrescriptionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescriptionItem not implemented")
}
func (UnimplementedPharmacyServiceServer) GetPrescriptionItem(context.Context, *GetPrescriptionItemRequest) (*GetPrescriptionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescriptionItem not implemented")
}
func (UnimplementedPharmacyServiceServer) ListPrescriptionItems(context.Context, *ListPrescriptionItemsRequest) (*ListPrescriptionItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptionItems not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdatePrescriptionItem(context.Context, *UpdatePrescriptionItemRequest) (*UpdatePrescriptionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescriptionItem not implemented")
}
func (UnimplementedPharmacyServiceServer) DeletePrescriptionItem(context.Context, *DeletePrescriptionItemRequest) (*DeletePrescriptionItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrescriptionItem not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateStore(context.Context, *CreateStoreRequest) (*CreateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedPharmacyServiceServer) GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedPharmacyServiceServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteStore(context.Context, *DeleteStoreRequest) (*DeleteStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateStockRequest(context.Context, *CreateStockRequestRequest) (*CreateStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) GetStockRequest(context.Context, *GetStockRequestRequest) (*GetStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) ListStockRequests(context.Context, *ListStockRequestsRequest) (*ListStockRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockRequests not implemented")
}
func (UnimplementedPharmacyServiceServer) ApproveStockRequest(context.Context, *ApproveStockRequestRequest) (*ApproveStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveStockRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteStockRequest(context.Context, *DeleteStockRequestRequest) (*DeleteStockRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStockRequest not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateStockRequestItem(context.Context, *CreateStockRequestItemRequest) (*CreateStockRequestItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockRequestItem not implemented")
}
func (UnimplementedPharmacyServiceServer) GetStockRequestItem(context.Context, *GetStockRequestItemRequest) (*GetStockRequestItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockRequestItem not implemented")
}
func (UnimplementedPharmacyServiceServer) ListStockRequestItems(context.Context, *ListStockRequestItemsRequest) (*ListStockRequestItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockRequestItems not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateStockRequestItem(context.Context, *UpdateStockRequestItemRequest) (*UpdateStockRequestItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockRequestItem not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteStockRequestItem(context.Context, *DeleteStockRequestItemRequest) (*DeleteStockRequestItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStockRequestItem not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateDispensedMedication(context.Context, *CreateDispensedMedicationRequest) (*CreateDispensedMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDispensedMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) GetDispensedMedication(context.Context, *GetDispensedMedicationRequest) (*GetDispensedMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDispensedMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) ListDispensedMedications(context.Context, *ListDispensedMedicationsRequest) (*ListDispensedMedicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDispensedMedications not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateDispensedMedication(context.Context, *UpdateDispensedMedicationRequest) (*UpdateDispensedMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDispensedMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteDispensedMedication(context.Context, *DeleteDispensedMedicationRequest) (*DeleteDispensedMedicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDispensedMedication not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateMedicationReturn(context.Context, *CreateMedicationReturnRequest) (*CreateMedicationReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicationReturn not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedicationReturn(context.Context, *GetMedicationReturnRequest) (*GetMedicationReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicationReturn not implemented")
}
func (UnimplementedPharmacyServiceServer) ListMedicationReturns(context.Context, *ListMedicationReturnsRequest) (*ListMedicationReturnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicationReturns not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateStockMovement(context.Context, *CreateStockMovementRequest) (*CreateStockMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStockMovement not implemented")
}
func (UnimplementedPharmacyServiceServer) GetStockMovement(context.Context, *GetStockMovementRequest) (*GetStockMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockMovement not implemented")
}
func (UnimplementedPharmacyServiceServer) ListStockMovements(context.Context, *ListStockMovementsRequest) (*ListStockMovementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStockMovements not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateStockMovement(context.Context, *UpdateStockMovementRequest) (*UpdateStockMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStockMovement not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteStockMovement(context.Context, *DeleteStockMovementRequest) (*DeleteStockMovementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStockMovement not implemented")
}
func (UnimplementedPharmacyServiceServer) CreateMedicationSchedule(context.Context, *CreateMedicationScheduleRequest) (*CreateMedicationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicationSchedule not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedicationSchedule(context.Context, *GetMedicationScheduleRequest) (*GetMedicationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicationSchedule not implemented")
}
func (UnimplementedPharmacyServiceServer) ListMedicationSchedules(context.Context, *ListMedicationSchedulesRequest) (*ListMedicationSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicationSchedules not implemented")
}
func (UnimplementedPharmacyServiceServer) UpdateMedicationSchedule(context.Context, *UpdateMedicationScheduleRequest) (*UpdateMedicationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicationSchedule not implemented")
}
func (UnimplementedPharmacyServiceServer) DeleteMedicationSchedule(context.Context, *DeleteMedicationScheduleRequest) (*DeleteMedicationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicationSchedule not implemented")
}
func (UnimplementedPharmacyServiceServer) RecordMedicationIntake(context.Context, *RecordMedicationIntakeRequest) (*RecordMedicationIntakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordMedicationIntake not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedicationIntake(context.Context, *GetMedicationIntakeRequest) (*GetMedicationIntakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicationIntake not implemented")
}
func (UnimplementedPharmacyServiceServer) ListMedicationIntakes(context.Context, *ListMedicationIntakesRequest) (*ListMedicationIntakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicationIntakes not implemented")
}
func (UnimplementedPharmacyServiceServer) GetPatientAdherenceRate(context.Context, *GetPatientAdherenceRateRequest) (*GetPatientAdherenceRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientAdherenceRate not implemented")
}
func (UnimplementedPharmacyServiceServer) GetMedicationAdherenceRate(context.Context, *GetMedicationAdherenceRateRequest) (*GetMedicationAdherenceRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicationAdherenceRate not implemented")
}
func (UnimplementedPharmacyServiceServer) GetTimeSlotMedications(context.Context, *GetTimeSlotMedicationsRequest) (*GetTimeSlotMedicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeSlotMedications not implemented")
}
func (UnimplementedPharmacyServiceServer) mustEmbedUnimplementedPharmacyServiceServer() {}
func (UnimplementedPharmacyServiceServer) testEmbeddedByValue()                         {}

// UnsafePharmacyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmacyServiceServer will
// result in compilation errors.
type UnsafePharmacyServiceServer interface {
	mustEmbedUnimplementedPharmacyServiceServer()
}

func RegisterPharmacyServiceServer(s grpc.ServiceRegistrar, srv PharmacyServiceServer) {
	// If the following call pancis, it indicates UnimplementedPharmacyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PharmacyService_ServiceDesc, srv)
}

func _PharmacyService_CreateMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateMedication(ctx, req.(*CreateMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedication(ctx, req.(*GetMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateMedication(ctx, req.(*UpdateMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteMedication(ctx, req.(*DeleteMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListMedications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListMedications(ctx, req.(*ListMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedicationWithCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationWithCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedicationWithCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedicationWithCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedicationWithCategory(ctx, req.(*GetMedicationWithCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateMedicationCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicationCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateMedicationCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateMedicationCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateMedicationCategory(ctx, req.(*CreateMedicationCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListMedicationCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListMedicationCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListMedicationCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListMedicationCategories(ctx, req.(*ListMedicationCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetSingleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetSingleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetSingleCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetSingleCategory(ctx, req.(*GetSingleCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreatePrescriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreatePrescriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreatePrescriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreatePrescriptionRequest(ctx, req.(*CreatePrescriptionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdatePrescriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrescriptionRequestsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdatePrescriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdatePrescriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdatePrescriptionRequest(ctx, req.(*UpdatePrescriptionRequestsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetSinglePrescriptionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSinglePrescriptionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetSinglePrescriptionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetSinglePrescriptionRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetSinglePrescriptionRequest(ctx, req.(*GetSinglePrescriptionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListPrescriptionRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionRequestsRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListPrescriptionRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListPrescriptionRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListPrescriptionRequests(ctx, req.(*ListPrescriptionRequestsRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreatePrescriptionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreatePrescriptionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreatePrescriptionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreatePrescriptionItem(ctx, req.(*CreatePrescriptionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetPrescriptionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetPrescriptionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetPrescriptionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetPrescriptionItem(ctx, req.(*GetPrescriptionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListPrescriptionItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListPrescriptionItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListPrescriptionItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListPrescriptionItems(ctx, req.(*ListPrescriptionItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdatePrescriptionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrescriptionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdatePrescriptionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdatePrescriptionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdatePrescriptionItem(ctx, req.(*UpdatePrescriptionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeletePrescriptionItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrescriptionItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeletePrescriptionItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeletePrescriptionItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeletePrescriptionItem(ctx, req.(*DeletePrescriptionItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateStore(ctx, req.(*CreateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteStore(ctx, req.(*DeleteStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateStockRequest(ctx, req.(*CreateStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetStockRequest(ctx, req.(*GetStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListStockRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListStockRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListStockRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListStockRequests(ctx, req.(*ListStockRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ApproveStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ApproveStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ApproveStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ApproveStockRequest(ctx, req.(*ApproveStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteStockRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteStockRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteStockRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteStockRequest(ctx, req.(*DeleteStockRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateStockRequestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRequestItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateStockRequestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateStockRequestItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateStockRequestItem(ctx, req.(*CreateStockRequestItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetStockRequestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockRequestItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetStockRequestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetStockRequestItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetStockRequestItem(ctx, req.(*GetStockRequestItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListStockRequestItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockRequestItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListStockRequestItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListStockRequestItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListStockRequestItems(ctx, req.(*ListStockRequestItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateStockRequestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockRequestItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateStockRequestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateStockRequestItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateStockRequestItem(ctx, req.(*UpdateStockRequestItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteStockRequestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockRequestItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteStockRequestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteStockRequestItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteStockRequestItem(ctx, req.(*DeleteStockRequestItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateDispensedMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDispensedMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateDispensedMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateDispensedMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateDispensedMedication(ctx, req.(*CreateDispensedMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetDispensedMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDispensedMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetDispensedMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetDispensedMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetDispensedMedication(ctx, req.(*GetDispensedMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListDispensedMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDispensedMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListDispensedMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListDispensedMedications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListDispensedMedications(ctx, req.(*ListDispensedMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateDispensedMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDispensedMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateDispensedMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateDispensedMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateDispensedMedication(ctx, req.(*UpdateDispensedMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteDispensedMedication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDispensedMedicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteDispensedMedication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteDispensedMedication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteDispensedMedication(ctx, req.(*DeleteDispensedMedicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateMedicationReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicationReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateMedicationReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateMedicationReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateMedicationReturn(ctx, req.(*CreateMedicationReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedicationReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedicationReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedicationReturn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedicationReturn(ctx, req.(*GetMedicationReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListMedicationReturns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationReturnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListMedicationReturns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListMedicationReturns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListMedicationReturns(ctx, req.(*ListMedicationReturnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateStockMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateStockMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateStockMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateStockMovement(ctx, req.(*CreateStockMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetStockMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetStockMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetStockMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetStockMovement(ctx, req.(*GetStockMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListStockMovements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockMovementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListStockMovements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListStockMovements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListStockMovements(ctx, req.(*ListStockMovementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateStockMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateStockMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateStockMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateStockMovement(ctx, req.(*UpdateStockMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteStockMovement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockMovementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteStockMovement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteStockMovement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteStockMovement(ctx, req.(*DeleteStockMovementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_CreateMedicationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).CreateMedicationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_CreateMedicationSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).CreateMedicationSchedule(ctx, req.(*CreateMedicationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedicationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedicationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedicationSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedicationSchedule(ctx, req.(*GetMedicationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListMedicationSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListMedicationSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListMedicationSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListMedicationSchedules(ctx, req.(*ListMedicationSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_UpdateMedicationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).UpdateMedicationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_UpdateMedicationSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).UpdateMedicationSchedule(ctx, req.(*UpdateMedicationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_DeleteMedicationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).DeleteMedicationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_DeleteMedicationSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).DeleteMedicationSchedule(ctx, req.(*DeleteMedicationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_RecordMedicationIntake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordMedicationIntakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).RecordMedicationIntake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_RecordMedicationIntake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).RecordMedicationIntake(ctx, req.(*RecordMedicationIntakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedicationIntake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationIntakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedicationIntake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedicationIntake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedicationIntake(ctx, req.(*GetMedicationIntakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_ListMedicationIntakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicationIntakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).ListMedicationIntakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_ListMedicationIntakes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).ListMedicationIntakes(ctx, req.(*ListMedicationIntakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetPatientAdherenceRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientAdherenceRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetPatientAdherenceRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetPatientAdherenceRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetPatientAdherenceRate(ctx, req.(*GetPatientAdherenceRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetMedicationAdherenceRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicationAdherenceRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetMedicationAdherenceRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetMedicationAdherenceRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetMedicationAdherenceRate(ctx, req.(*GetMedicationAdherenceRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacyService_GetTimeSlotMedications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeSlotMedicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacyServiceServer).GetTimeSlotMedications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacyService_GetTimeSlotMedications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacyServiceServer).GetTimeSlotMedications(ctx, req.(*GetTimeSlotMedicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmacyService_ServiceDesc is the grpc.ServiceDesc for PharmacyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmacyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pharmacy_service.PharmacyService",
	HandlerType: (*PharmacyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedication",
			Handler:    _PharmacyService_CreateMedication_Handler,
		},
		{
			MethodName: "GetMedication",
			Handler:    _PharmacyService_GetMedication_Handler,
		},
		{
			MethodName: "UpdateMedication",
			Handler:    _PharmacyService_UpdateMedication_Handler,
		},
		{
			MethodName: "DeleteMedication",
			Handler:    _PharmacyService_DeleteMedication_Handler,
		},
		{
			MethodName: "ListMedications",
			Handler:    _PharmacyService_ListMedications_Handler,
		},
		{
			MethodName: "GetMedicationWithCategory",
			Handler:    _PharmacyService_GetMedicationWithCategory_Handler,
		},
		{
			MethodName: "CreateMedicationCategory",
			Handler:    _PharmacyService_CreateMedicationCategory_Handler,
		},
		{
			MethodName: "ListMedicationCategories",
			Handler:    _PharmacyService_ListMedicationCategories_Handler,
		},
		{
			MethodName: "GetSingleCategory",
			Handler:    _PharmacyService_GetSingleCategory_Handler,
		},
		{
			MethodName: "CreatePrescriptionRequest",
			Handler:    _PharmacyService_CreatePrescriptionRequest_Handler,
		},
		{
			MethodName: "UpdatePrescriptionRequest",
			Handler:    _PharmacyService_UpdatePrescriptionRequest_Handler,
		},
		{
			MethodName: "GetSinglePrescriptionRequest",
			Handler:    _PharmacyService_GetSinglePrescriptionRequest_Handler,
		},
		{
			MethodName: "ListPrescriptionRequests",
			Handler:    _PharmacyService_ListPrescriptionRequests_Handler,
		},
		{
			MethodName: "CreatePrescriptionItem",
			Handler:    _PharmacyService_CreatePrescriptionItem_Handler,
		},
		{
			MethodName: "GetPrescriptionItem",
			Handler:    _PharmacyService_GetPrescriptionItem_Handler,
		},
		{
			MethodName: "ListPrescriptionItems",
			Handler:    _PharmacyService_ListPrescriptionItems_Handler,
		},
		{
			MethodName: "UpdatePrescriptionItem",
			Handler:    _PharmacyService_UpdatePrescriptionItem_Handler,
		},
		{
			MethodName: "DeletePrescriptionItem",
			Handler:    _PharmacyService_DeletePrescriptionItem_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _PharmacyService_CreateStore_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _PharmacyService_GetStore_Handler,
		},
		{
			MethodName: "ListStores",
			Handler:    _PharmacyService_ListStores_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _PharmacyService_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _PharmacyService_DeleteStore_Handler,
		},
		{
			MethodName: "CreateStockRequest",
			Handler:    _PharmacyService_CreateStockRequest_Handler,
		},
		{
			MethodName: "GetStockRequest",
			Handler:    _PharmacyService_GetStockRequest_Handler,
		},
		{
			MethodName: "ListStockRequests",
			Handler:    _PharmacyService_ListStockRequests_Handler,
		},
		{
			MethodName: "ApproveStockRequest",
			Handler:    _PharmacyService_ApproveStockRequest_Handler,
		},
		{
			MethodName: "DeleteStockRequest",
			Handler:    _PharmacyService_DeleteStockRequest_Handler,
		},
		{
			MethodName: "CreateStockRequestItem",
			Handler:    _PharmacyService_CreateStockRequestItem_Handler,
		},
		{
			MethodName: "GetStockRequestItem",
			Handler:    _PharmacyService_GetStockRequestItem_Handler,
		},
		{
			MethodName: "ListStockRequestItems",
			Handler:    _PharmacyService_ListStockRequestItems_Handler,
		},
		{
			MethodName: "UpdateStockRequestItem",
			Handler:    _PharmacyService_UpdateStockRequestItem_Handler,
		},
		{
			MethodName: "DeleteStockRequestItem",
			Handler:    _PharmacyService_DeleteStockRequestItem_Handler,
		},
		{
			MethodName: "CreateDispensedMedication",
			Handler:    _PharmacyService_CreateDispensedMedication_Handler,
		},
		{
			MethodName: "GetDispensedMedication",
			Handler:    _PharmacyService_GetDispensedMedication_Handler,
		},
		{
			MethodName: "ListDispensedMedications",
			Handler:    _PharmacyService_ListDispensedMedications_Handler,
		},
		{
			MethodName: "UpdateDispensedMedication",
			Handler:    _PharmacyService_UpdateDispensedMedication_Handler,
		},
		{
			MethodName: "DeleteDispensedMedication",
			Handler:    _PharmacyService_DeleteDispensedMedication_Handler,
		},
		{
			MethodName: "CreateMedicationReturn",
			Handler:    _PharmacyService_CreateMedicationReturn_Handler,
		},
		{
			MethodName: "GetMedicationReturn",
			Handler:    _PharmacyService_GetMedicationReturn_Handler,
		},
		{
			MethodName: "ListMedicationReturns",
			Handler:    _PharmacyService_ListMedicationReturns_Handler,
		},
		{
			MethodName: "CreateStockMovement",
			Handler:    _PharmacyService_CreateStockMovement_Handler,
		},
		{
			MethodName: "GetStockMovement",
			Handler:    _PharmacyService_GetStockMovement_Handler,
		},
		{
			MethodName: "ListStockMovements",
			Handler:    _PharmacyService_ListStockMovements_Handler,
		},
		{
			MethodName: "UpdateStockMovement",
			Handler:    _PharmacyService_UpdateStockMovement_Handler,
		},
		{
			MethodName: "DeleteStockMovement",
			Handler:    _PharmacyService_DeleteStockMovement_Handler,
		},
		{
			MethodName: "CreateMedicationSchedule",
			Handler:    _PharmacyService_CreateMedicationSchedule_Handler,
		},
		{
			MethodName: "GetMedicationSchedule",
			Handler:    _PharmacyService_GetMedicationSchedule_Handler,
		},
		{
			MethodName: "ListMedicationSchedules",
			Handler:    _PharmacyService_ListMedicationSchedules_Handler,
		},
		{
			MethodName: "UpdateMedicationSchedule",
			Handler:    _PharmacyService_UpdateMedicationSchedule_Handler,
		},
		{
			MethodName: "DeleteMedicationSchedule",
			Handler:    _PharmacyService_DeleteMedicationSchedule_Handler,
		},
		{
			MethodName: "RecordMedicationIntake",
			Handler:    _PharmacyService_RecordMedicationIntake_Handler,
		},
		{
			MethodName: "GetMedicationIntake",
			Handler:    _PharmacyService_GetMedicationIntake_Handler,
		},
		{
			MethodName: "ListMedicationIntakes",
			Handler:    _PharmacyService_ListMedicationIntakes_Handler,
		},
		{
			MethodName: "GetPatientAdherenceRate",
			Handler:    _PharmacyService_GetPatientAdherenceRate_Handler,
		},
		{
			MethodName: "GetMedicationAdherenceRate",
			Handler:    _PharmacyService_GetMedicationAdherenceRate_Handler,
		},
		{
			MethodName: "GetTimeSlotMedications",
			Handler:    _PharmacyService_GetTimeSlotMedications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pharmacy_service.proto",
}
