// user_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: user_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName           = "/user_service.UserService/CreateUser"
	UserService_GetUser_FullMethodName              = "/user_service.UserService/GetUser"
	UserService_UpdateUser_FullMethodName           = "/user_service.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName           = "/user_service.UserService/DeleteUser"
	UserService_ListUsers_FullMethodName            = "/user_service.UserService/ListUsers"
	UserService_UpdatePassword_FullMethodName       = "/user_service.UserService/UpdatePassword"
	UserService_UpdateUserStatus_FullMethodName     = "/user_service.UserService/UpdateUserStatus"
	UserService_CreateHospital_FullMethodName       = "/user_service.UserService/CreateHospital"
	UserService_GetHospital_FullMethodName          = "/user_service.UserService/GetHospital"
	UserService_UpdateHospital_FullMethodName       = "/user_service.UserService/UpdateHospital"
	UserService_ListHospitals_FullMethodName        = "/user_service.UserService/ListHospitals"
	UserService_CreatePaymentType_FullMethodName    = "/user_service.UserService/CreatePaymentType"
	UserService_UpdatePaymentType_FullMethodName    = "/user_service.UserService/UpdatePaymentType"
	UserService_DeletePaymentType_FullMethodName    = "/user_service.UserService/DeletePaymentType"
	UserService_ListPaymentTypes_FullMethodName     = "/user_service.UserService/ListPaymentTypes"
	UserService_CreateSchemeProvider_FullMethodName = "/user_service.UserService/CreateSchemeProvider"
	UserService_UpdateSchemeProvider_FullMethodName = "/user_service.UserService/UpdateSchemeProvider"
	UserService_DeleteSchemeProvider_FullMethodName = "/user_service.UserService/DeleteSchemeProvider"
	UserService_ListSchemeProviders_FullMethodName  = "/user_service.UserService/ListSchemeProviders"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User Management Service
type UserServiceClient interface {
	// Create a new user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Get a user by ID
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Update a user
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	// Delete a user by ID
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// List all users
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	// Update user password
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	// Update user status (active/inactive)
	UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error)
	// Hospital Management
	CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*CreateHospitalResponse, error)
	GetHospital(ctx context.Context, in *GetHospitalRequest, opts ...grpc.CallOption) (*GetHospitalResponse, error)
	UpdateHospital(ctx context.Context, in *UpdateHospitalRequest, opts ...grpc.CallOption) (*UpdateHospitalResponse, error)
	ListHospitals(ctx context.Context, in *ListHospitalsRequest, opts ...grpc.CallOption) (*ListHospitalsResponse, error)
	// Payment Types Management
	CreatePaymentType(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*CreatePaymentTypeResponse, error)
	UpdatePaymentType(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*UpdatePaymentTypeResponse, error)
	DeletePaymentType(ctx context.Context, in *DeletePaymentTypeRequest, opts ...grpc.CallOption) (*DeletePaymentTypeResponse, error)
	ListPaymentTypes(ctx context.Context, in *ListPaymentTypesRequest, opts ...grpc.CallOption) (*ListPaymentTypesResponse, error)
	// Scheme Providers Management
	CreateSchemeProvider(ctx context.Context, in *CreateSchemeProviderRequest, opts ...grpc.CallOption) (*CreateSchemeProviderResponse, error)
	UpdateSchemeProvider(ctx context.Context, in *UpdateSchemeProviderRequest, opts ...grpc.CallOption) (*UpdateSchemeProviderResponse, error)
	DeleteSchemeProvider(ctx context.Context, in *DeleteSchemeProviderRequest, opts ...grpc.CallOption) (*DeleteSchemeProviderResponse, error)
	ListSchemeProviders(ctx context.Context, in *ListSchemeProvidersRequest, opts ...grpc.CallOption) (*ListSchemeProvidersResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...grpc.CallOption) (*UpdateUserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserStatusResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateHospital(ctx context.Context, in *CreateHospitalRequest, opts ...grpc.CallOption) (*CreateHospitalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHospitalResponse)
	err := c.cc.Invoke(ctx, UserService_CreateHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetHospital(ctx context.Context, in *GetHospitalRequest, opts ...grpc.CallOption) (*GetHospitalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHospitalResponse)
	err := c.cc.Invoke(ctx, UserService_GetHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateHospital(ctx context.Context, in *UpdateHospitalRequest, opts ...grpc.CallOption) (*UpdateHospitalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHospitalResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateHospital_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListHospitals(ctx context.Context, in *ListHospitalsRequest, opts ...grpc.CallOption) (*ListHospitalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHospitalsResponse)
	err := c.cc.Invoke(ctx, UserService_ListHospitals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreatePaymentType(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*CreatePaymentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePaymentTypeResponse)
	err := c.cc.Invoke(ctx, UserService_CreatePaymentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePaymentType(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*UpdatePaymentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentTypeResponse)
	err := c.cc.Invoke(ctx, UserService_UpdatePaymentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeletePaymentType(ctx context.Context, in *DeletePaymentTypeRequest, opts ...grpc.CallOption) (*DeletePaymentTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaymentTypeResponse)
	err := c.cc.Invoke(ctx, UserService_DeletePaymentType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListPaymentTypes(ctx context.Context, in *ListPaymentTypesRequest, opts ...grpc.CallOption) (*ListPaymentTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentTypesResponse)
	err := c.cc.Invoke(ctx, UserService_ListPaymentTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateSchemeProvider(ctx context.Context, in *CreateSchemeProviderRequest, opts ...grpc.CallOption) (*CreateSchemeProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSchemeProviderResponse)
	err := c.cc.Invoke(ctx, UserService_CreateSchemeProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSchemeProvider(ctx context.Context, in *UpdateSchemeProviderRequest, opts ...grpc.CallOption) (*UpdateSchemeProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSchemeProviderResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateSchemeProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteSchemeProvider(ctx context.Context, in *DeleteSchemeProviderRequest, opts ...grpc.CallOption) (*DeleteSchemeProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSchemeProviderResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteSchemeProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListSchemeProviders(ctx context.Context, in *ListSchemeProvidersRequest, opts ...grpc.CallOption) (*ListSchemeProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSchemeProvidersResponse)
	err := c.cc.Invoke(ctx, UserService_ListSchemeProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// User Management Service
type UserServiceServer interface {
	// Create a new user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Get a user by ID
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Update a user
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	// Delete a user by ID
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// List all users
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	// Update user password
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	// Update user status (active/inactive)
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error)
	// Hospital Management
	CreateHospital(context.Context, *CreateHospitalRequest) (*CreateHospitalResponse, error)
	GetHospital(context.Context, *GetHospitalRequest) (*GetHospitalResponse, error)
	UpdateHospital(context.Context, *UpdateHospitalRequest) (*UpdateHospitalResponse, error)
	ListHospitals(context.Context, *ListHospitalsRequest) (*ListHospitalsResponse, error)
	// Payment Types Management
	CreatePaymentType(context.Context, *CreatePaymentTypeRequest) (*CreatePaymentTypeResponse, error)
	UpdatePaymentType(context.Context, *UpdatePaymentTypeRequest) (*UpdatePaymentTypeResponse, error)
	DeletePaymentType(context.Context, *DeletePaymentTypeRequest) (*DeletePaymentTypeResponse, error)
	ListPaymentTypes(context.Context, *ListPaymentTypesRequest) (*ListPaymentTypesResponse, error)
	// Scheme Providers Management
	CreateSchemeProvider(context.Context, *CreateSchemeProviderRequest) (*CreateSchemeProviderResponse, error)
	UpdateSchemeProvider(context.Context, *UpdateSchemeProviderRequest) (*UpdateSchemeProviderResponse, error)
	DeleteSchemeProvider(context.Context, *DeleteSchemeProviderRequest) (*DeleteSchemeProviderResponse, error)
	ListSchemeProviders(context.Context, *ListSchemeProvidersRequest) (*ListSchemeProvidersResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*UpdateUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatus not implemented")
}
func (UnimplementedUserServiceServer) CreateHospital(context.Context, *CreateHospitalRequest) (*CreateHospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHospital not implemented")
}
func (UnimplementedUserServiceServer) GetHospital(context.Context, *GetHospitalRequest) (*GetHospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHospital not implemented")
}
func (UnimplementedUserServiceServer) UpdateHospital(context.Context, *UpdateHospitalRequest) (*UpdateHospitalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHospital not implemented")
}
func (UnimplementedUserServiceServer) ListHospitals(context.Context, *ListHospitalsRequest) (*ListHospitalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHospitals not implemented")
}
func (UnimplementedUserServiceServer) CreatePaymentType(context.Context, *CreatePaymentTypeRequest) (*CreatePaymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentType not implemented")
}
func (UnimplementedUserServiceServer) UpdatePaymentType(context.Context, *UpdatePaymentTypeRequest) (*UpdatePaymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentType not implemented")
}
func (UnimplementedUserServiceServer) DeletePaymentType(context.Context, *DeletePaymentTypeRequest) (*DeletePaymentTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentType not implemented")
}
func (UnimplementedUserServiceServer) ListPaymentTypes(context.Context, *ListPaymentTypesRequest) (*ListPaymentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentTypes not implemented")
}
func (UnimplementedUserServiceServer) CreateSchemeProvider(context.Context, *CreateSchemeProviderRequest) (*CreateSchemeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchemeProvider not implemented")
}
func (UnimplementedUserServiceServer) UpdateSchemeProvider(context.Context, *UpdateSchemeProviderRequest) (*UpdateSchemeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemeProvider not implemented")
}
func (UnimplementedUserServiceServer) DeleteSchemeProvider(context.Context, *DeleteSchemeProviderRequest) (*DeleteSchemeProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemeProvider not implemented")
}
func (UnimplementedUserServiceServer) ListSchemeProviders(context.Context, *ListSchemeProvidersRequest) (*ListSchemeProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemeProviders not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateHospital(ctx, req.(*CreateHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetHospital(ctx, req.(*GetHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateHospital_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHospitalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateHospital(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateHospital_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateHospital(ctx, req.(*UpdateHospitalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListHospitals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHospitalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListHospitals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListHospitals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListHospitals(ctx, req.(*ListHospitalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreatePaymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreatePaymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreatePaymentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreatePaymentType(ctx, req.(*CreatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePaymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePaymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdatePaymentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePaymentType(ctx, req.(*UpdatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeletePaymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeletePaymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeletePaymentType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeletePaymentType(ctx, req.(*DeletePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListPaymentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListPaymentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListPaymentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListPaymentTypes(ctx, req.(*ListPaymentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateSchemeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemeProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateSchemeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateSchemeProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateSchemeProvider(ctx, req.(*CreateSchemeProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSchemeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemeProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSchemeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateSchemeProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSchemeProvider(ctx, req.(*UpdateSchemeProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteSchemeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemeProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteSchemeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteSchemeProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteSchemeProvider(ctx, req.(*DeleteSchemeProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListSchemeProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemeProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListSchemeProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListSchemeProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListSchemeProviders(ctx, req.(*ListSchemeProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateUserStatus",
			Handler:    _UserService_UpdateUserStatus_Handler,
		},
		{
			MethodName: "CreateHospital",
			Handler:    _UserService_CreateHospital_Handler,
		},
		{
			MethodName: "GetHospital",
			Handler:    _UserService_GetHospital_Handler,
		},
		{
			MethodName: "UpdateHospital",
			Handler:    _UserService_UpdateHospital_Handler,
		},
		{
			MethodName: "ListHospitals",
			Handler:    _UserService_ListHospitals_Handler,
		},
		{
			MethodName: "CreatePaymentType",
			Handler:    _UserService_CreatePaymentType_Handler,
		},
		{
			MethodName: "UpdatePaymentType",
			Handler:    _UserService_UpdatePaymentType_Handler,
		},
		{
			MethodName: "DeletePaymentType",
			Handler:    _UserService_DeletePaymentType_Handler,
		},
		{
			MethodName: "ListPaymentTypes",
			Handler:    _UserService_ListPaymentTypes_Handler,
		},
		{
			MethodName: "CreateSchemeProvider",
			Handler:    _UserService_CreateSchemeProvider_Handler,
		},
		{
			MethodName: "UpdateSchemeProvider",
			Handler:    _UserService_UpdateSchemeProvider_Handler,
		},
		{
			MethodName: "DeleteSchemeProvider",
			Handler:    _UserService_DeleteSchemeProvider_Handler,
		},
		{
			MethodName: "ListSchemeProviders",
			Handler:    _UserService_ListSchemeProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_service.proto",
}
