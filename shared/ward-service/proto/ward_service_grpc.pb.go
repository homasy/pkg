// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: ward_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WardService_CreateBed_FullMethodName       = "/ward_service.WardService/CreateBed"
	WardService_GetBed_FullMethodName          = "/ward_service.WardService/GetBed"
	WardService_UpdateBed_FullMethodName       = "/ward_service.WardService/UpdateBed"
	WardService_DeleteBed_FullMethodName       = "/ward_service.WardService/DeleteBed"
	WardService_ListBeds_FullMethodName        = "/ward_service.WardService/ListBeds"
	WardService_CreateWard_FullMethodName      = "/ward_service.WardService/CreateWard"
	WardService_GetWard_FullMethodName         = "/ward_service.WardService/GetWard"
	WardService_UpdateWard_FullMethodName      = "/ward_service.WardService/UpdateWard"
	WardService_DeleteWard_FullMethodName      = "/ward_service.WardService/DeleteWard"
	WardService_ListWards_FullMethodName       = "/ward_service.WardService/ListWards"
	WardService_CreateAdmission_FullMethodName = "/ward_service.WardService/CreateAdmission"
	WardService_GetAdmission_FullMethodName    = "/ward_service.WardService/GetAdmission"
	WardService_ListAdmissions_FullMethodName  = "/ward_service.WardService/ListAdmissions"
	WardService_UpdateAdmission_FullMethodName = "/ward_service.WardService/UpdateAdmission"
	WardService_DeleteAdmission_FullMethodName = "/ward_service.WardService/DeleteAdmission"
	WardService_TransferPatient_FullMethodName = "/ward_service.WardService/TransferPatient"
	WardService_GetTransfer_FullMethodName     = "/ward_service.WardService/GetTransfer"
	WardService_ListTransfers_FullMethodName   = "/ward_service.WardService/ListTransfers"
	WardService_CreateDischarge_FullMethodName = "/ward_service.WardService/CreateDischarge"
	WardService_ListDischarges_FullMethodName  = "/ward_service.WardService/ListDischarges"
	WardService_UpdateDischarge_FullMethodName = "/ward_service.WardService/UpdateDischarge"
	WardService_GetDischarge_FullMethodName    = "/ward_service.WardService/GetDischarge"
)

// WardServiceClient is the client API for WardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WardServiceClient interface {
	CreateBed(ctx context.Context, in *CreateBedRequest, opts ...grpc.CallOption) (*CreateBedResponse, error)
	// Retrieve a single bed
	GetBed(ctx context.Context, in *GetBedRequest, opts ...grpc.CallOption) (*GetBedResponse, error)
	// Update a bed's details
	UpdateBed(ctx context.Context, in *UpdateBedRequest, opts ...grpc.CallOption) (*UpdateBedResponse, error)
	// Delete a bed
	DeleteBed(ctx context.Context, in *DeleteBedRequest, opts ...grpc.CallOption) (*DeleteBedResponse, error)
	// List all beds
	ListBeds(ctx context.Context, in *ListBedsRequest, opts ...grpc.CallOption) (*ListBedsResponse, error)
	// ward services definition
	CreateWard(ctx context.Context, in *CreateWardRequest, opts ...grpc.CallOption) (*CreateWardResponse, error)
	GetWard(ctx context.Context, in *GetWardRequest, opts ...grpc.CallOption) (*GetWardResponse, error)
	UpdateWard(ctx context.Context, in *UpdateWardRequest, opts ...grpc.CallOption) (*UpdateWardResponse, error)
	DeleteWard(ctx context.Context, in *DeleteWardRequest, opts ...grpc.CallOption) (*DeleteWardResponse, error)
	ListWards(ctx context.Context, in *ListWardsRequest, opts ...grpc.CallOption) (*ListWardsResponse, error)
	// admissions service definitions
	CreateAdmission(ctx context.Context, in *CreateAdmissionRequest, opts ...grpc.CallOption) (*CreateAdmissionResponse, error)
	GetAdmission(ctx context.Context, in *GetAdmissionRequest, opts ...grpc.CallOption) (*GetAdmissionResponse, error)
	ListAdmissions(ctx context.Context, in *ListAdmissionsRequest, opts ...grpc.CallOption) (*ListAdmissionsResponse, error)
	UpdateAdmission(ctx context.Context, in *UpdateAdmissionRequest, opts ...grpc.CallOption) (*UpdateAdmissionResponse, error)
	DeleteAdmission(ctx context.Context, in *DeleteAdmissionRequest, opts ...grpc.CallOption) (*DeleteAdmissionResponse, error)
	// Patient transfer service
	TransferPatient(ctx context.Context, in *TransferPatientRequest, opts ...grpc.CallOption) (*TransferPatientResponse, error)
	GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error)
	ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	// discharges
	CreateDischarge(ctx context.Context, in *CreateDischargeRequest, opts ...grpc.CallOption) (*CreateDischargeResponse, error)
	ListDischarges(ctx context.Context, in *ListDischargesRequest, opts ...grpc.CallOption) (*ListDischargesResponse, error)
	UpdateDischarge(ctx context.Context, in *UpdateDischargeRequest, opts ...grpc.CallOption) (*UpdateDischargeResponse, error)
	GetDischarge(ctx context.Context, in *GetDischargeRequest, opts ...grpc.CallOption) (*GetDischargeResponse, error)
}

type wardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWardServiceClient(cc grpc.ClientConnInterface) WardServiceClient {
	return &wardServiceClient{cc}
}

func (c *wardServiceClient) CreateBed(ctx context.Context, in *CreateBedRequest, opts ...grpc.CallOption) (*CreateBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBedResponse)
	err := c.cc.Invoke(ctx, WardService_CreateBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) GetBed(ctx context.Context, in *GetBedRequest, opts ...grpc.CallOption) (*GetBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBedResponse)
	err := c.cc.Invoke(ctx, WardService_GetBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) UpdateBed(ctx context.Context, in *UpdateBedRequest, opts ...grpc.CallOption) (*UpdateBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBedResponse)
	err := c.cc.Invoke(ctx, WardService_UpdateBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) DeleteBed(ctx context.Context, in *DeleteBedRequest, opts ...grpc.CallOption) (*DeleteBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBedResponse)
	err := c.cc.Invoke(ctx, WardService_DeleteBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) ListBeds(ctx context.Context, in *ListBedsRequest, opts ...grpc.CallOption) (*ListBedsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBedsResponse)
	err := c.cc.Invoke(ctx, WardService_ListBeds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) CreateWard(ctx context.Context, in *CreateWardRequest, opts ...grpc.CallOption) (*CreateWardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWardResponse)
	err := c.cc.Invoke(ctx, WardService_CreateWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) GetWard(ctx context.Context, in *GetWardRequest, opts ...grpc.CallOption) (*GetWardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWardResponse)
	err := c.cc.Invoke(ctx, WardService_GetWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) UpdateWard(ctx context.Context, in *UpdateWardRequest, opts ...grpc.CallOption) (*UpdateWardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWardResponse)
	err := c.cc.Invoke(ctx, WardService_UpdateWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) DeleteWard(ctx context.Context, in *DeleteWardRequest, opts ...grpc.CallOption) (*DeleteWardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWardResponse)
	err := c.cc.Invoke(ctx, WardService_DeleteWard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) ListWards(ctx context.Context, in *ListWardsRequest, opts ...grpc.CallOption) (*ListWardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWardsResponse)
	err := c.cc.Invoke(ctx, WardService_ListWards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) CreateAdmission(ctx context.Context, in *CreateAdmissionRequest, opts ...grpc.CallOption) (*CreateAdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAdmissionResponse)
	err := c.cc.Invoke(ctx, WardService_CreateAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) GetAdmission(ctx context.Context, in *GetAdmissionRequest, opts ...grpc.CallOption) (*GetAdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdmissionResponse)
	err := c.cc.Invoke(ctx, WardService_GetAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) ListAdmissions(ctx context.Context, in *ListAdmissionsRequest, opts ...grpc.CallOption) (*ListAdmissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdmissionsResponse)
	err := c.cc.Invoke(ctx, WardService_ListAdmissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) UpdateAdmission(ctx context.Context, in *UpdateAdmissionRequest, opts ...grpc.CallOption) (*UpdateAdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdmissionResponse)
	err := c.cc.Invoke(ctx, WardService_UpdateAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) DeleteAdmission(ctx context.Context, in *DeleteAdmissionRequest, opts ...grpc.CallOption) (*DeleteAdmissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAdmissionResponse)
	err := c.cc.Invoke(ctx, WardService_DeleteAdmission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) TransferPatient(ctx context.Context, in *TransferPatientRequest, opts ...grpc.CallOption) (*TransferPatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferPatientResponse)
	err := c.cc.Invoke(ctx, WardService_TransferPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) GetTransfer(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*GetTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransferResponse)
	err := c.cc.Invoke(ctx, WardService_GetTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) ListTransfers(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, WardService_ListTransfers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) CreateDischarge(ctx context.Context, in *CreateDischargeRequest, opts ...grpc.CallOption) (*CreateDischargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDischargeResponse)
	err := c.cc.Invoke(ctx, WardService_CreateDischarge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) ListDischarges(ctx context.Context, in *ListDischargesRequest, opts ...grpc.CallOption) (*ListDischargesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDischargesResponse)
	err := c.cc.Invoke(ctx, WardService_ListDischarges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) UpdateDischarge(ctx context.Context, in *UpdateDischargeRequest, opts ...grpc.CallOption) (*UpdateDischargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDischargeResponse)
	err := c.cc.Invoke(ctx, WardService_UpdateDischarge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wardServiceClient) GetDischarge(ctx context.Context, in *GetDischargeRequest, opts ...grpc.CallOption) (*GetDischargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDischargeResponse)
	err := c.cc.Invoke(ctx, WardService_GetDischarge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WardServiceServer is the server API for WardService service.
// All implementations must embed UnimplementedWardServiceServer
// for forward compatibility.
type WardServiceServer interface {
	CreateBed(context.Context, *CreateBedRequest) (*CreateBedResponse, error)
	// Retrieve a single bed
	GetBed(context.Context, *GetBedRequest) (*GetBedResponse, error)
	// Update a bed's details
	UpdateBed(context.Context, *UpdateBedRequest) (*UpdateBedResponse, error)
	// Delete a bed
	DeleteBed(context.Context, *DeleteBedRequest) (*DeleteBedResponse, error)
	// List all beds
	ListBeds(context.Context, *ListBedsRequest) (*ListBedsResponse, error)
	// ward services definition
	CreateWard(context.Context, *CreateWardRequest) (*CreateWardResponse, error)
	GetWard(context.Context, *GetWardRequest) (*GetWardResponse, error)
	UpdateWard(context.Context, *UpdateWardRequest) (*UpdateWardResponse, error)
	DeleteWard(context.Context, *DeleteWardRequest) (*DeleteWardResponse, error)
	ListWards(context.Context, *ListWardsRequest) (*ListWardsResponse, error)
	// admissions service definitions
	CreateAdmission(context.Context, *CreateAdmissionRequest) (*CreateAdmissionResponse, error)
	GetAdmission(context.Context, *GetAdmissionRequest) (*GetAdmissionResponse, error)
	ListAdmissions(context.Context, *ListAdmissionsRequest) (*ListAdmissionsResponse, error)
	UpdateAdmission(context.Context, *UpdateAdmissionRequest) (*UpdateAdmissionResponse, error)
	DeleteAdmission(context.Context, *DeleteAdmissionRequest) (*DeleteAdmissionResponse, error)
	// Patient transfer service
	TransferPatient(context.Context, *TransferPatientRequest) (*TransferPatientResponse, error)
	GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error)
	ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	// discharges
	CreateDischarge(context.Context, *CreateDischargeRequest) (*CreateDischargeResponse, error)
	ListDischarges(context.Context, *ListDischargesRequest) (*ListDischargesResponse, error)
	UpdateDischarge(context.Context, *UpdateDischargeRequest) (*UpdateDischargeResponse, error)
	GetDischarge(context.Context, *GetDischargeRequest) (*GetDischargeResponse, error)
	mustEmbedUnimplementedWardServiceServer()
}

// UnimplementedWardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWardServiceServer struct{}

func (UnimplementedWardServiceServer) CreateBed(context.Context, *CreateBedRequest) (*CreateBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBed not implemented")
}
func (UnimplementedWardServiceServer) GetBed(context.Context, *GetBedRequest) (*GetBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBed not implemented")
}
func (UnimplementedWardServiceServer) UpdateBed(context.Context, *UpdateBedRequest) (*UpdateBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBed not implemented")
}
func (UnimplementedWardServiceServer) DeleteBed(context.Context, *DeleteBedRequest) (*DeleteBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBed not implemented")
}
func (UnimplementedWardServiceServer) ListBeds(context.Context, *ListBedsRequest) (*ListBedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeds not implemented")
}
func (UnimplementedWardServiceServer) CreateWard(context.Context, *CreateWardRequest) (*CreateWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWard not implemented")
}
func (UnimplementedWardServiceServer) GetWard(context.Context, *GetWardRequest) (*GetWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWard not implemented")
}
func (UnimplementedWardServiceServer) UpdateWard(context.Context, *UpdateWardRequest) (*UpdateWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWard not implemented")
}
func (UnimplementedWardServiceServer) DeleteWard(context.Context, *DeleteWardRequest) (*DeleteWardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWard not implemented")
}
func (UnimplementedWardServiceServer) ListWards(context.Context, *ListWardsRequest) (*ListWardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWards not implemented")
}
func (UnimplementedWardServiceServer) CreateAdmission(context.Context, *CreateAdmissionRequest) (*CreateAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdmission not implemented")
}
func (UnimplementedWardServiceServer) GetAdmission(context.Context, *GetAdmissionRequest) (*GetAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdmission not implemented")
}
func (UnimplementedWardServiceServer) ListAdmissions(context.Context, *ListAdmissionsRequest) (*ListAdmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdmissions not implemented")
}
func (UnimplementedWardServiceServer) UpdateAdmission(context.Context, *UpdateAdmissionRequest) (*UpdateAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmission not implemented")
}
func (UnimplementedWardServiceServer) DeleteAdmission(context.Context, *DeleteAdmissionRequest) (*DeleteAdmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdmission not implemented")
}
func (UnimplementedWardServiceServer) TransferPatient(context.Context, *TransferPatientRequest) (*TransferPatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPatient not implemented")
}
func (UnimplementedWardServiceServer) GetTransfer(context.Context, *GetTransferRequest) (*GetTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfer not implemented")
}
func (UnimplementedWardServiceServer) ListTransfers(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransfers not implemented")
}
func (UnimplementedWardServiceServer) CreateDischarge(context.Context, *CreateDischargeRequest) (*CreateDischargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDischarge not implemented")
}
func (UnimplementedWardServiceServer) ListDischarges(context.Context, *ListDischargesRequest) (*ListDischargesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDischarges not implemented")
}
func (UnimplementedWardServiceServer) UpdateDischarge(context.Context, *UpdateDischargeRequest) (*UpdateDischargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDischarge not implemented")
}
func (UnimplementedWardServiceServer) GetDischarge(context.Context, *GetDischargeRequest) (*GetDischargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDischarge not implemented")
}
func (UnimplementedWardServiceServer) mustEmbedUnimplementedWardServiceServer() {}
func (UnimplementedWardServiceServer) testEmbeddedByValue()                     {}

// UnsafeWardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WardServiceServer will
// result in compilation errors.
type UnsafeWardServiceServer interface {
	mustEmbedUnimplementedWardServiceServer()
}

func RegisterWardServiceServer(s grpc.ServiceRegistrar, srv WardServiceServer) {
	// If the following call pancis, it indicates UnimplementedWardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WardService_ServiceDesc, srv)
}

func _WardService_CreateBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).CreateBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_CreateBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).CreateBed(ctx, req.(*CreateBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_GetBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_GetBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetBed(ctx, req.(*GetBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_UpdateBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).UpdateBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_UpdateBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).UpdateBed(ctx, req.(*UpdateBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_DeleteBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).DeleteBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_DeleteBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).DeleteBed(ctx, req.(*DeleteBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_ListBeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).ListBeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_ListBeds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).ListBeds(ctx, req.(*ListBedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_CreateWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).CreateWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_CreateWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).CreateWard(ctx, req.(*CreateWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_GetWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_GetWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetWard(ctx, req.(*GetWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_UpdateWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).UpdateWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_UpdateWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).UpdateWard(ctx, req.(*UpdateWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_DeleteWard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).DeleteWard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_DeleteWard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).DeleteWard(ctx, req.(*DeleteWardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_ListWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).ListWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_ListWards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).ListWards(ctx, req.(*ListWardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_CreateAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).CreateAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_CreateAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).CreateAdmission(ctx, req.(*CreateAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_GetAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_GetAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetAdmission(ctx, req.(*GetAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_ListAdmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).ListAdmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_ListAdmissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).ListAdmissions(ctx, req.(*ListAdmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_UpdateAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).UpdateAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_UpdateAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).UpdateAdmission(ctx, req.(*UpdateAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_DeleteAdmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).DeleteAdmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_DeleteAdmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).DeleteAdmission(ctx, req.(*DeleteAdmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_TransferPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).TransferPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_TransferPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).TransferPatient(ctx, req.(*TransferPatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_GetTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_GetTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetTransfer(ctx, req.(*GetTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_ListTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).ListTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_ListTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).ListTransfers(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_CreateDischarge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDischargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).CreateDischarge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_CreateDischarge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).CreateDischarge(ctx, req.(*CreateDischargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_ListDischarges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDischargesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).ListDischarges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_ListDischarges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).ListDischarges(ctx, req.(*ListDischargesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_UpdateDischarge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDischargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).UpdateDischarge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_UpdateDischarge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).UpdateDischarge(ctx, req.(*UpdateDischargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WardService_GetDischarge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDischargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WardServiceServer).GetDischarge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WardService_GetDischarge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WardServiceServer).GetDischarge(ctx, req.(*GetDischargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WardService_ServiceDesc is the grpc.ServiceDesc for WardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ward_service.WardService",
	HandlerType: (*WardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBed",
			Handler:    _WardService_CreateBed_Handler,
		},
		{
			MethodName: "GetBed",
			Handler:    _WardService_GetBed_Handler,
		},
		{
			MethodName: "UpdateBed",
			Handler:    _WardService_UpdateBed_Handler,
		},
		{
			MethodName: "DeleteBed",
			Handler:    _WardService_DeleteBed_Handler,
		},
		{
			MethodName: "ListBeds",
			Handler:    _WardService_ListBeds_Handler,
		},
		{
			MethodName: "CreateWard",
			Handler:    _WardService_CreateWard_Handler,
		},
		{
			MethodName: "GetWard",
			Handler:    _WardService_GetWard_Handler,
		},
		{
			MethodName: "UpdateWard",
			Handler:    _WardService_UpdateWard_Handler,
		},
		{
			MethodName: "DeleteWard",
			Handler:    _WardService_DeleteWard_Handler,
		},
		{
			MethodName: "ListWards",
			Handler:    _WardService_ListWards_Handler,
		},
		{
			MethodName: "CreateAdmission",
			Handler:    _WardService_CreateAdmission_Handler,
		},
		{
			MethodName: "GetAdmission",
			Handler:    _WardService_GetAdmission_Handler,
		},
		{
			MethodName: "ListAdmissions",
			Handler:    _WardService_ListAdmissions_Handler,
		},
		{
			MethodName: "UpdateAdmission",
			Handler:    _WardService_UpdateAdmission_Handler,
		},
		{
			MethodName: "DeleteAdmission",
			Handler:    _WardService_DeleteAdmission_Handler,
		},
		{
			MethodName: "TransferPatient",
			Handler:    _WardService_TransferPatient_Handler,
		},
		{
			MethodName: "GetTransfer",
			Handler:    _WardService_GetTransfer_Handler,
		},
		{
			MethodName: "ListTransfers",
			Handler:    _WardService_ListTransfers_Handler,
		},
		{
			MethodName: "CreateDischarge",
			Handler:    _WardService_CreateDischarge_Handler,
		},
		{
			MethodName: "ListDischarges",
			Handler:    _WardService_ListDischarges_Handler,
		},
		{
			MethodName: "UpdateDischarge",
			Handler:    _WardService_UpdateDischarge_Handler,
		},
		{
			MethodName: "GetDischarge",
			Handler:    _WardService_GetDischarge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ward_service.proto",
}
